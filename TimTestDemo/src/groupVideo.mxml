<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#ffffff" borderStyle="none" width="489" height="515" layout="absolute" creationComplete="_initNetConnection()">
	<mx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
	        import com.realeyes.net.util.NetStreamClient;
			import com.realeyes.net.util.NetStreamDataEvent;	
			import mx.controls.*;
			import mx.formatters.DateFormatter;       
	        import flash.utils.Timer;    
	        import flash.events.TimerEvent; 
	        import mx.events.CloseEvent;
			import mx.events.SliderEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.core.UIComponent; 
			private const SERVER:String = "rtmfp://stratus.adobe.com/";
			private const DEVKEY:String = "6b754e9d85b872b8f9c55a69-da4e8ad8ec29";			
			private var _netConnection:NetConnection;
			private var _groupSpecifier:GroupSpecifier;
			private var _outgoingStream:NetStream;
		    private var _incomingStream:NetStream;	
			private var videoDisplay2:VideoDisplay;
			private var videoDisplay3:VideoDisplay;
			private var _streamClient:NetStreamClient;			
			private var _netGroup:NetGroup;	
            private var micIndex:int = 0;
            private var keyCode:int;
	        private var shiftKey:Boolean;
	        private var ctrlKey:Boolean;	
	        private var mic:Microphone;
            private var audioInd:Indicator;
            private var audioInd1:Indicator;
            private var uc:UIComponent= new UIComponent();     
			[Bindable] private var _nearID:String;
			[Bindable] private var _groupSpec:String;
			[Bindable] private var camera:Camera;				
			[Bindable] private var _outgoingStreamOn:Boolean;
			[Bindable] private var _incomingStreamOn:Boolean;
            [Bindable] private var _netGroupConnected:Boolean;
			[Bindable] private var _estimatedP2PMembers:Number;
			[Bindable] private var userName:String; 
			[Bindable] private var USERKEY:String;
			// 聊天请求编号
			private var chatReqId:String;
			// 标记是否已经连接
			private var isConnection:Boolean = false;
			private function _initNetConnection():void {	
				_netConnection = new NetConnection();
				_streamClient = new NetStreamClient();			
				_netConnection.addEventListener (NetStatusEvent.NET_STATUS, onNetStatus );
				_netConnection.connect(SERVER + DEVKEY);
			}
			protected function onNetStatus(event:NetStatusEvent):void {
				switch(event.info.code) {
					case "NetConnection.Connect.Success": {
						_nearID = event.target.nearID;					
					    _createGroupSpec();
					    onJoinNetGroup();
						break;
					}				
					case "NetStream.Connect.Success": {
						break;
					}
					case "NetGroup.Connect.Success": {// 用户连接NetGroup成功
						_attachLocalVideoAndAudio();				
						break;
					}					
					case "NetGroup.Connect.Failed": {
						clearNetGroup();
						break;
					}
				}
			}
			private function _createGroupSpec():void {
				var param:Object=this.stage.loaderInfo.parameters;
				if (param["str"]!=null) {
					var myar:Array = String(param["str"]).split("|");
					USERKEY=myar[0];
					//USERKEY="1qq123123";
					userName = myar[1];
				    //userName = "132123";
				    chatReqId = myar[2];
					_groupSpecifier = new GroupSpecifier(USERKEY);
					_groupSpecifier.multicastEnabled = true;
					_groupSpecifier.objectReplicationEnabled = true;
					_groupSpecifier.postingEnabled = true;
					_groupSpecifier.routingEnabled = true;
					/**if (true) { //测试局域网
						this._groupSpecifier.ipMulticastMemberUpdatesEnabled = true;
						this._groupSpecifier.addIPMulticastAddress("224.0.1.200:3000");
					} else {*/
					_groupSpecifier.serverChannelEnabled = true;
					//}
					_groupSpec = _groupSpecifier.groupspecWithoutAuthorizations();
				}
			}
			protected function onJoinNetGroup():void {			
				_netGroup = new NetGroup(_netConnection, _groupSpec);
				_netGroup.addEventListener(NetStatusEvent.NET_STATUS, onNetGroupStatus);
				//处理提交的信息滚动到最末端
				info.addEventListener(FlexEvent.UPDATE_COMPLETE, handleMessage);
				//用回车键提交信息
	            message.textArea.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);  
	            message.textArea.addEventListener(TextEvent.TEXT_INPUT, onTextInput);			
			}
			protected function onNetGroupStatus(event:NetStatusEvent):void {
				switch (event.info.code) {
					case "NetGroup.Posting.Notify": {
						info.htmlText+="<font color='#0000ff' face='Arial' size='13'>"+event.info.message.user +"&nbsp;&nbsp;&nbsp;"+event.info.message.date+ "</font>\n" +"<textformat leftMargin='20'>"+event.info.message.htmlText+ "</textformat>";			
						break;
					}																		
					case "NetGroup.Neighbor.Connect": {// 加入NetGroup成功
						// 修正为已连接
						isConnection = true;
						// 修正IE关闭执行函数-不提示,不更新
						ExternalInterface.call("setExplorerHandler", 3);
						//如果不是自己，其中_nearID = event.target.nearID;	
						if(event.info.neighbor != _netGroup.convertPeerIDToGroupAddress(_nearID)) {
							//视，音频初始化
							_attachPeerVideoAndAudio(event.info.neighbor);
							//通知所有人，有人加入netgroup
							doPost();
	                        playSound();
						}
						break;
					}
					case "NetGroup.Neighbor.Disconnect": {//退出NetGroup
						// 退出视频时重新布局视频界面
						cancelPeerVideoAndAudio(event.info.neighbor);
						// 更新聊天结束状态
						ExternalInterface.call("updateChartStatus", chatReqId, "END_CHAT");
						// 设置为未连接
						isConnection = false;
						// 不提示，不执行更新
						ExternalInterface.call("setExplorerHandler", 3);
						Alert.show("对方已退出聊天，是否要退出？","提示",3, null, function(event:CloseEvent):void {
							if (event.detail==Alert.YES) {
								// 关闭当前窗口
								ExternalInterface.call("EndOfCall");
							}
						});
						break;
					}
					//处理dopost()传过来的信息，也即是 _netGroup.sendToAllNeighbors()方法发布的信息
					case "NetGroup.SendTo.Notify": {
						break;
					}
				}									
			}			
		    private function doPost():void {    
                var message_username:Object = new Object;                
                 message_username.user = "cgusername:"+userName+":"+_netGroup.convertPeerIDToGroupAddress( _nearID )+":";
                _netGroup.sendToAllNeighbors(message_username);                
            }  
            //发送文本信息     
			protected function onPostMessage():Boolean {
				if( _netGroup && !message.text ) {
					//Alert.show("The content can not be empty.","Notice");
					Alert.show("内容不能为空！","提示");
					return false;
				} else {
					var dateFormatter:DateFormatter = new DateFormatter();     
                    dateFormatter.formatString = "YYYY/MM/DD HH:NN:SS";    
                    var time:String = new Date().toLocaleTimeString();    
                    var date:String = dateFormatter.format(new Date()); 
					var chat_message:Object = new Object;   
					chat_message.user=userName;
					chat_message.date=date;
					chat_message.htmlText="<textformat leftMargin='20'>"+ message.htmlText + "</textformat>";
				    info.htmlText+="<font color='#008040' face='Arial' size='13'>"+userName +"&nbsp;&nbsp;&nbsp;"+date+ "</font>\n" +"<textformat leftMargin='20'>"+ message.htmlText + "</textformat>";
					_netGroup.post(chat_message);
					message.text="";
			        return true;
				}
			}
			//发布本地视频流			
			private function _attachLocalVideoAndAudio():void {		
				_outgoingStream = new NetStream(_netConnection, _groupSpec);	
				_outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
				_outgoingStream.client = _streamClient;		
				camera= Camera.getCamera();
				mic= Microphone.getMicrophone();
				audioInd=new Indicator(70,7,0x000000,0xffffff); 
                audioInd.Current = 0.05 + mic.activityLevel/100; 
                uc.addChild(audioInd); 
     	        uc.x=35;
     	        uc.y=13;    	      
     	        micVolumeSlider.addChildAt(uc,0);
     	        audioInd1=new Indicator(70,7,0x000000,0xffffff);
     	        audioInd1.Current = 0.05 + speakerVolumeSlider.value; 
     	        var uc1:UIComponent=new UIComponent();
                uc1.addChild(audioInd1); 
     	        uc1.x=35;
     	        uc1.y=13;    	      
     	        speakerVolumeSlider.addChildAt(uc1,0); 	   
     	        mic.addEventListener(ActivityEvent.ACTIVITY, activity);
     	        if (mic) {
     	        	//设置音频参数
     	        	mic.codec = SoundCodec.SPEEX;
     	        	mic.setLoopBack(false);
     	        	mic.rate = 44;
     	        	mic.gain = 100;
     	        	mic.noiseSuppressionLevel = -20;
     	        	mic.setSilenceLevel(40, 1000);
     	        	mic.setUseEchoSuppression(true);
     	        	_outgoingStream.attachAudio(mic);
     	        }
     	        if (camera) {
     	        	//设置视频参数
     	        	camera.setKeyFrameInterval(15);
     	        	camera.setMode(120, 100, 12);
     	        	camera.setQuality(144000,85);
     	        	//camera.setQuality(0,85);
     	        	//camera.setMode(160, 120, 15);
			    } else {
			    	// Alert.show("The video device is not found.","Notice");
			    	Alert.show("没找到视频设备！","提示");
			    }
			    var localVideo:Video = new Video();
			    localVideo.width = 142;
	            localVideo.height = 143;
	            localVideo.x=4;
	            localVideo.y=4;
	            localVideo.name=_netGroup.convertPeerIDToGroupAddress(_nearID)+"local";       
	            localVideo.attachCamera(camera);
			    var myvideo:VideoDisplay=new VideoDisplay();
			    myvideo.name= _netGroup.convertPeerIDToGroupAddress(_nearID);
			    myvideo.width=150;
				myvideo.height=151;
				myvideo.setStyle("borderStyle","solid");
				myvideo.setStyle("borderThickness","4");
				myvideo.setStyle("cornerRadius","5");
				myvideo.setStyle("borderColor","#A3A4A9");
				myvideo.setStyle("backgroundImage","http://www.chinesegreat.com/CG/video/assert/bg.jpg");				
				myvideo.addChildAt(localVideo,0);
				myvideo.x=144;
				myvideo.y=33;
				test.height=220;					
				test.addChild(myvideo);
				_outgoingStream.attachCamera(camera);
				_outgoingStream.publish(_netGroup.convertPeerIDToGroupAddress(_nearID));							 
			}
			private function activity(event:ActivityEvent):void {
				addEventListener(Event.ENTER_FRAME, init1);
			}
			private function init1(event:Event):void {
				audioInd.Current = 0.05 + mic.activityLevel/100;
			}
			//播放接收到的视频流
			private function _attachPeerVideoAndAudio(i:String):void {		
				_incomingStream = new NetStream(_netConnection, _groupSpec);
				_incomingStream.client = _streamClient;
				var remoteVideo1:Video = new Video();
				remoteVideo1.width=142;
				remoteVideo1.height=143;
				remoteVideo1.x=4;
                remoteVideo1.y=4;
                remoteVideo1.name=i+"remote";
				remoteVideo1.attachNetStream(_incomingStream);
			    var videoDisplay1:VideoDisplay=new VideoDisplay();
				videoDisplay1.name=i;
				videoDisplay1.width=150;
				videoDisplay1.height=151;
				videoDisplay1.setStyle("borderStyle","solid");
				videoDisplay1.setStyle("borderThickness","4");
				videoDisplay1.setStyle("cornerRadius","5");
				videoDisplay1.setStyle("borderColor","#A3A4A9");
				videoDisplay1.setStyle("backgroundImage","http://www.chinesegreat.com/CG/video/assert/bg.jpg");
				videoDisplay1.addChildAt(remoteVideo1,0);
				_incomingStream.play(i);
				test.addChild(videoDisplay1);
				resetVideo(i);
			}
			private function resetVideo(i:String):void {
			   test.getChildByName(_netGroup.convertPeerIDToGroupAddress( _nearID )).width=150;
			   test.getChildByName(_netGroup.convertPeerIDToGroupAddress( _nearID )).height=151;
			   videoDisplay2=test.getChildByName(_netGroup.convertPeerIDToGroupAddress( _nearID )) as VideoDisplay;
			   videoDisplay2.getChildByName(_netGroup.convertPeerIDToGroupAddress( _nearID )+"local").width=142;
		       videoDisplay2.getChildByName(_netGroup.convertPeerIDToGroupAddress( _nearID )+"local").height=143;
			   videoDisplay2.x=46;
			   videoDisplay2.y=33;
		       test.getChildByName(i).width=150;
		       test.getChildByName(i).height=151;
		       videoDisplay3=test.getChildByName(i) as VideoDisplay;
		       videoDisplay3.getChildByName(i+"remote").width=142;
		       videoDisplay3.getChildByName(i+"remote").height=143;
		       videoDisplay3.x=242;
		       videoDisplay3.y=33;
			}
			private function cancelPeerVideoAndAudio(i:String):void {
				test.getChildByName(i).width=0;
				test.getChildByName(i).height=0;
				test.getChildByName(i).visible=false;
				test.getChildByName(_netGroup.convertPeerIDToGroupAddress(_nearID)).width=150;
				test.getChildByName(_netGroup.convertPeerIDToGroupAddress(_nearID)).height=151;
				videoDisplay2=test.getChildByName(_netGroup.convertPeerIDToGroupAddress(_nearID)) as VideoDisplay;
				videoDisplay2.getChildByName(_netGroup.convertPeerIDToGroupAddress(_nearID)+"local").width=142;
				videoDisplay2.getChildByName(_netGroup.convertPeerIDToGroupAddress(_nearID)+"local").height=143;
			    videoDisplay2.x=144;
				videoDisplay2.y=33;
			}
			protected function clearNetGroup():void {
				_netGroup.close();
				_netGroup.removeEventListener(NetStatusEvent.NET_STATUS, onNetGroupStatus);
				_netGroup = null;
			}
			//重定义富文本输入框
			private function showControlBar():void {
				message.toolbar.parent.removeChild(message.toolbar);
				message.toolbar.removeChild(message.linkTextInput);
				message.toolbar.removeChild(message.bulletButton);
				message.toolbar.removeChild(message.alignButtons);
				message._RichTextEditor_VRule1.visible=false;
				message._RichTextEditor_VRule2.visible=false;
				message.textArea.height=70;
				message.colorPicker.width=24;
				message.colorPicker.height=24;
				message.italicButton.width=24;
				message.italicButton.height=24;
				message.boldButton.width=24;
				message.boldButton.height=24;
				message.underlineButton.width=24;
				message.underlineButton.height=24;
				//message.toolbar.addChild(popUpButton_pic);
				message.addChildAt(message.toolbar,0);
			}
			//关闭事件
			public function close(type:int):void {
				//Alert.yesLabel="Yes";
				//Alert.noLabel="No";
				Alert.yesLabel="确定";
				Alert.noLabel="取消";
				if (type==1) {
					//Alert.show("Are you sure to exit?", "Notice", 3, null, alertClickHandler);
					if (isConnection) {// 已连接
						Alert.show("确定要退出视频！", "提示", 3, null, alertClickHandler);
					} else {// 未连接
						// 修正IE关闭执行函数-提示,更新
						ExternalInterface.call("setExplorerHandler", 0);
						// 关闭当前窗口
						ExternalInterface.call("EndOfCall");
					}
				}
			}
			private function alertClickHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					_netConnection.close();
					_outgoingStream.close();
					_netConnection=null;
					_outgoingStream=null;
					clearNetGroup();
					// 更新聊天结束状态-最后推出的人调用
					// ExternalInterface.call("updateChartStatus", chatReqId, "END_CHAT");
					if (isConnection) {// 已连接
						 // 修正IE关闭执行函数-不提示,不更新
						ExternalInterface.call("setExplorerHandler", 3);
					}
					// 关闭当前窗口
					ExternalInterface.call("EndOfCall");
				}
			}
            // 说话音量调节
            private function speakerVolumeChanged(e:SliderEvent):void {
            	if (_incomingStream) {
            		var st:SoundTransform = new SoundTransform(e.value);
            		_incomingStream.soundTransform = st;
            		audioInd1.Current = 0.05 + e.value;
            	}
            }
            // 耳麦音量调节
			private function micVolumeChanged(e:SliderEvent):void {
				var mic:Microphone = Microphone.getMicrophone(micIndex);
				if (mic) {
					mic.gain = e.value;
				}
			}
			//用回车键提交信息
			private function onKeyDown(e:KeyboardEvent):void {	 
				//如果按下Enter时还按下Shift/Ctrl，则换行	 
				if(e.keyCode==Keyboard.ENTER && (e.shiftKey || e.ctrlKey)) {						
					callLater(function():void{ //注意这个callLater				 
						var msg:String = message.text;				 
						var part1:String = msg.substring(0, message.textArea.selectionBeginIndex);			 
						var part2:String = msg.substring(message.textArea.selectionEndIndex, 0x7fffffff);			 
						var selIndex:int = message.textArea.selectionBeginIndex + 1;		
						message.text = part1 + "\n" + part2;
						message.textArea.setSelection(selIndex,selIndex);		
					});			 
					keyCode = -1; //标识本次按键不需要TEXT_INPUT事件配合处理			 
					return;
				}	 
				shiftKey = e.shiftKey;
				ctrlKey = e.ctrlKey;
				keyCode = e.keyCode;
			}
			private function onTextInput(evt:TextEvent):void {	 
				if (keyCode == -1) {	 
					return;
				}	 
				if (keyCode==Keyboard.ENTER && !shiftKey && !ctrlKey && message.text !="") {
	    			evt.preventDefault();
					callLater(function():void {		 
						//sendMessage()即为发送消息的方法，它应该返回一个Boolean值，以此来决定是否清空消息框 
						if(onPostMessage()){
							message.text = "";
							message.htmlText = "";
							message.textArea.setSelection(0,0);		 
						}
					});
				}
			}
			//当前显示区域显示最新的信息
			private function handleMessage(event:Event):void {
				if (info.verticalScrollPosition < info.maxVerticalScrollPosition) {
					info.verticalScrollPosition = info.maxVerticalScrollPosition;
				}
			}

			private function stopVideo():void {
				camera=null;
				_outgoingStream.attachCamera(camera);
				stopVideoButton.visible=false;
				sendVideoButton.visible=true;
				sendVideoButton.x=10;
			}
			private function sendVideo():void {
				camera=Camera.getCamera();
				_outgoingStream.attachCamera(camera);
				stopVideoButton.visible=true;
				sendVideoButton.visible=false;
			}
			//播放声音
			private function playSound():void {
				var snd:Sound = new Sound();
				var req:URLRequest = new URLRequest("http://www.chinesegreat.com/CG/videoRing.mp3");
				snd.load(req);
				snd.play();
			}
		]]>
		</mx:Script>
<mx:Panel title="ChineseGreat" titleIcon="@Embed(source='assert/logo.jpg')" borderStyle="none" layout="vertical" width="489" height="515" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="totalArea" backgroundColor="#ffffff" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="0" backgroundAlpha="0.92" alpha="1.0" fontSize="12" fontFamily="Arial">		

<mx:VBox paddingLeft="10" >
<mx:Canvas borderStyle="solid" cornerRadius="2" id="test" height="230" borderColor="#B7BABC" width="438">
</mx:Canvas></mx:VBox>
<mx:VBox>
<mx:HBox width="489" paddingLeft="10">
<mx:Image source="@Embed('/assert/video.jpg')" useHandCursor="true" buttonMode="true" id="stopVideoButton" click="stopVideo()" height="22"/> 
<mx:Image source="@Embed('/assert/video2.jpg')" useHandCursor="true" buttonMode="true" visible="false" id="sendVideoButton" click="sendVideo()" height="22"/> 
<mx:Image source="@Embed('/assert/micVol.jpg')" height="22" /> 
<mx:HSlider thumbSkin="@Embed('/assert/icon.png')" id="micVolumeSlider" trackSkin="STSliderTrackSkin" value="90" width="75" showDataTip="false" minimum="0" maximum="100" change="micVolumeChanged(event)"/>
<mx:Label width="30"/>
<mx:Image source="@Embed('/assert/speakVol.jpg')" height="22"/> 
<mx:HSlider thumbSkin="@Embed('/assert/icon.png')" id="speakerVolumeSlider" trackSkin="STSliderTrackSkin" showDataTip="false" value="0.9" width="75" minimum="0" maximum="1" change="speakerVolumeChanged(event)"/>				
</mx:HBox>
	<mx:HBox paddingLeft="10">
	<mx:TextArea width="438" height="100" id="info" editable="false"/>
	</mx:HBox>
	<mx:HBox> 
	<mx:RichTextEditor borderStyle="none" id="message" creationComplete="showControlBar();" width="380" height="120" paddingBottom="-12" backgroundColor="#ffffff" textAlign="left" fontStyle="normal" fontFamily="Verdana" horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="0" paddingRight="0" headerHeight="0" fontSize="12"/>
	<mx:VBox paddingTop="30" id="buttonArea">		
<mx:VBox paddingTop="3">
  <mx:Button id="closeBtn" label="发送" click="onPostMessage()" fontFamily="Arial" width="60" alpha="0.8" fontSize="12" cornerRadius="5" fontWeight="bold"/>
  <mx:Button id="sendMessageBtn" label="关闭" width="60" click="close(1)" alpha="0.8" fontFamily="Arial" fontSize="12" cornerRadius="5" fontWeight="bold"/>		 
</mx:VBox>
</mx:VBox></mx:HBox></mx:VBox>		
</mx:Panel>	
</mx:Application>
