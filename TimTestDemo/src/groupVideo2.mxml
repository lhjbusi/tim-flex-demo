<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#ffffff" borderStyle="none" width="489" height="515" layout="absolute" creationComplete="_initNetConnection()" >
	<mx:Style>Application {font-size:12px;font-style:normal;font-weight:normal;}</mx:Style>
	<mx:Script>
	<![CDATA[
		import com.realeyes.net.util.NetStreamClient;
		import com.realeyes.net.util.NetStreamDataEvent;

		import flash.utils.Timer;
		import flash.events.TimerEvent;

		import mx.controls.*;
		import mx.formatters.DateFormatter;
		import mx.events.CloseEvent;
		import mx.events.SliderEvent;
		import mx.events.FlexEvent;
		import mx.utils.ObjectUtil;
		import mx.core.UIComponent;

		private const SERVER:String = "rtmfp://stratus.adobe.com/";
		private const DEVKEY:String = "6b754e9d85b872b8f9c55a69-da4e8ad8ec29";
		private var _netConnection:NetConnection;
		private var _groupSpecifier:GroupSpecifier;
		private var _outgoingStream:NetStream;
		private var _incomingStream:NetStream;
		private var videoDisplay2:VideoDisplay;
		private var videoDisplay3:VideoDisplay;
		private var _streamClient:NetStreamClient;
		private var _netGroup:NetGroup;
		private var micIndex:int=0;
		private var keyCode:int;
		private var shiftKey:Boolean;
		private var ctrlKey:Boolean;
 		private var mic:Microphone;
 		private var audioInd:Indicator;
 		private var audioInd1:Indicator;
 		private var uc:UIComponent= new UIComponent();
		[Bindable] private var _nearID:String;
 		[Bindable] private var _netConnectionConnected:Boolean;
		[Bindable] private var _groupSpec:String;
		[Bindable] private var camera:Camera;
		[Bindable] private var _outgoingStreamOn:Boolean;
		[Bindable] private var _incomingStreamOn:Boolean;
 		[Bindable] private var _netGroupConnected:Boolean;
		[Bindable] private var _estimatedP2PMembers:Number;
		// 房间人数
		[Bindable] private var roomMember:int=1;
		[Bindable] private var streamId:String;
		[Bindable] private var userName:String;
		[Bindable] private var labelUserName:String;
		[Bindable] private var allNeighborId:Array =new Array();
		[Bindable] private var allUserInfo:Array =new Array();

		protected function onNetStatus(event:NetStatusEvent):void {
			switch (event.info.code) {
				case "NetConnection.Connect.Success": {
					_netConnectionConnected = true;
					_nearID = event.target.nearID;
					_createGroupSpec();
					onJoinNetGroup();
				break;
				}
				case "NetStream.Connect.Success":
				break;
				case "NetGroup.Connect.Success": {
					_attachLocalVideoAndAudio();
				break;
				}
				case "NetGroup.Connect.Failed": {
					clearNetGroup();
				break;
				}																				
			}
		}	
		protected function onNetGroupStatus(event:NetStatusEvent):void {
			switch (event.info.code) {									
				case "NetGroup.Posting.Notify": {
					info.htmlText+="<font color='#0000ff' face='Arial' size='13'>"+event.info.message.user +"&nbsp;&nbsp;&nbsp;"+event.info.message.date+ "</font>\n" +"<textformat leftMargin='20'>"+event.info.message.htmlText+ "</textformat>";
				break;
				}
				case "NetGroup.Neighbor.Connect": {
					// 加入NetGroup成功，执行以下操作
					if (event.info.neighbor != _netGroup.convertPeerIDToGroupAddress(_nearID)) {
						// 房间人数计数器
						roomMember = roomMember+1;
						streamId = event.info.neighbor;
						// 将当前用户记录入用户组
						allNeighborId.push(streamId);
						// 重置共享视频区域布局
						_attachPeerVideoAndAudio(streamId);
						// 转发消息至各个邻居-激活NetGroup的Nofity事件
						doPost();
						if (userName=="Kitty" || userName=="qiu"|| userName=="Francine"|| userName=="nubechina"){
						 	playSound();
						}
					}
				break;
				}
				case "NetGroup.Neighbor.Disconnect": {
					// 调用结果处理
					ExternalInterface.call("");
					roomMember = roomMember-1;	
					var index:int=allNeighborId.indexOf(event.info.neighbor);
					allNeighborId.splice(index,1);
					cancelPeerVideoAndAudio(event.info.neighbor);
					var temp2:int=0;
					for (var p:int=0;p<allUserInfo.length;p++) {
						if (allUserInfo[p].peerId == event.info.neighbor)
							temp2=p;
				 	}
				 	allUserInfo.splice(temp2,1);
				 	dg.dataProvider=allUserInfo;
				break;
				}
				case "NetGroup.SendTo.Notify": {
					// event.info.message = cgusername:userName:PeerId:
					// 截取NetGroup.sendToAllNeighbors发送的消息
					var username:int=ObjectUtil.toString(event.info.message).indexOf("cgusername");
					var netGroupNearID:String='"'+_netGroup.convertPeerIDToGroupAddress(_nearID)+'"';
					// 什么时候会相等？
					if (ObjectUtil.toString(event.info.message) == netGroupNearID) {
					 	close(3);
					} else if (username != -1) {
						var temp:Array = ObjectUtil.toString(event.info.message).split(":");
						videoDisplay3 = VideoDisplay(this.test.getChildByName(temp[2]));
						// 设置视频用户名称
						Label(videoDisplay3.getChildByName(temp[2]+"label")).text=temp[1];
						var temp1:Boolean=false;
						for (var p:int=0;p<allUserInfo.length;p++) {
							if (allUserInfo[p].peerId == temp[2])
								temp1=true;
						}
						if (!temp1) {
							// 储存用户信息
							var userInfo:Object=new Object();
							userInfo.userName=temp[1];
							userInfo.peerId=temp[2];
							allUserInfo.push(userInfo);
							// 设置DataGrid数据源
							dg.dataProvider=allUserInfo;
						}
					}
				break;
				}
			}
		}
		private function doPost():void {
			var message_username:Object = new Object;
			message_username.user = "cgusername:"+userName+":"+_netGroup.convertPeerIDToGroupAddress(_nearID)+":";
			// 消息转发到各个邻居-激活NetGroup的Notify事件
			_netGroup.sendToAllNeighbors(message_username);
		}
		private function _initNetConnection():void {
			_netConnection = new NetConnection();
			_streamClient = new NetStreamClient();
			_netConnection.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
			_netConnection.connect(SERVER + DEVKEY);
		}
		protected function onJoinNetGroup():void {
			// 获取flash加载时的参数数据-工程room.jsp内传入
			// var param:Object=this.stage.loaderInfo.parameters;
			var param:Object={str:"1|Kitty|12|8|8868|true"};
			if (param["str"] != null) {
				var myar:Array = String(param["str"]).split("|");
				userName = myar[1];
				// 尝试链接进入指定组_groupSpec为房间标识
				_netGroup = new NetGroup(_netConnection, _groupSpec);
				_netGroup.addEventListener(NetStatusEvent.NET_STATUS, onNetGroupStatus);
				// 滚动房间信息到最低端
				info.addEventListener(FlexEvent.UPDATE_COMPLETE,handleMessage);
				// 发送消息框换行(Enter+Ctrl|Enter+Shift)
				message.textArea.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
				// 点击Enter发送消息并清空消息框
				message.textArea.addEventListener(TextEvent.TEXT_INPUT,onTextInput);
			}
			if (userName=="Kitty" || userName=="qiu"|| userName=="Francine"|| userName=="nubechina") {
				buttonArea.setStyle("paddingTop","12");
				popUpButton_pic.visible=true;
				popUpButton_pic.height=20;
			}
		}
		private function _createGroupSpec():void {
			// 实例化网络用户组
			_groupSpecifier = new GroupSpecifier(DEVKEY + "TimZhao1985");
			// 为NetGroup启用流
			_groupSpecifier.multicastEnabled = true;
			// 启用对象复制
			_groupSpecifier.objectReplicationEnabled = true;
			// 启用发布
			_groupSpecifier.postingEnabled = true;
			// 启用定向路由方法
			_groupSpecifier.routingEnabled = true;
			// 成员是否能打开到服务器的通道
			_groupSpecifier.serverChannelEnabled = true;

			// 可理解为网络唯一房间标识，可认为是peerId（非常重要的东西，其它用户通过它链接进来）
			_groupSpec = _groupSpecifier.groupspecWithoutAuthorizations();
		}
		protected function onPostMessage():Boolean {
			if (_netGroup && !message.text) {
				//Alert.show("The content can not be empty.","Notice");
				Alert.show("内容不能为空！","提示");
				return false;
			} else {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "YYYY/MM/DD HH:NN:SS";
				var time:String = new Date().toLocaleTimeString();
				var date:String = dateFormatter.format(new Date());
				var chat_message:Object = new Object;
				chat_message.user=userName;
				chat_message.date=date;
				chat_message.htmlText="<textformat leftMargin='20'>"+ message.htmlText + "</textformat>";
				info.htmlText+="<font color='#008040' face='Arial' size='13'>"+userName +"&nbsp;&nbsp;&nbsp;"+date+ "</font>\n" +"<textformat leftMargin='20'>"+ message.htmlText + "</textformat>";
				_netGroup.post(chat_message);
				message.text="";
				return true;
			}
		}
		private function _attachLocalVideoAndAudio():void {
			_outgoingStream = new NetStream(_netConnection, _groupSpec);
			_outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
			_outgoingStream.client = _streamClient;
			camera= Camera.getCamera();
			mic= Microphone.getMicrophone();
			audioInd=new Indicator(70,7,0x000000,0xffffff);
			audioInd.Current = 0.05 + mic.activityLevel/100;
			uc.addChild(audioInd);
			uc.x=35;
			uc.y=13;
			micVolumeSlider.addChildAt(uc,0);
			audioInd1=new Indicator(70,7,0x000000,0xffffff);
			audioInd1.Current = 0.05 + speakerVolumeSlider.value;
			var uc1:UIComponent=new UIComponent();
			uc1.addChild(audioInd1);
			uc1.x=35;
			uc1.y=13;
			speakerVolumeSlider.addChildAt(uc1,0);
			mic.addEventListener(ActivityEvent.ACTIVITY, activity);
			if (mic)
				_outgoingStream.attachAudio(mic);
			if (camera) {
				camera.setQuality(0,85);
				camera.setMode(160, 120, 15);
			} else
				Alert.show("没找到视频设备！","提示");
			var localVideo:Video = new Video();
			localVideo.width = 142;
			localVideo.height = 143;
			localVideo.x=4;
			localVideo.y=4;
			localVideo.name=_netGroup.convertPeerIDToGroupAddress(_nearID)+"local";
			localVideo.attachCamera(camera);
			var label:Label=new Label();
			label.text=userName;
			label.name=_netGroup.convertPeerIDToGroupAddress(_nearID)+"label";
			label.width=150;
			label.height=20;
			label.setStyle("textAlign","center");
			label.setStyle("color","#ffff00");
			var myvideo:VideoDisplay=new VideoDisplay();
			myvideo.width=150;
			myvideo.name=_netGroup.convertPeerIDToGroupAddress(_nearID);
			myvideo.height=151;
			myvideo.setStyle("borderStyle","solid");
			myvideo.setStyle("borderThickness","4");
			myvideo.setStyle("cornerRadius","5");
			myvideo.setStyle("borderColor","#A3A4A9");
			myvideo.setStyle("backgroundImage","http://www.chinesegreat.com/CG/video/assert/bg.jpg");
			myvideo.addChildAt(localVideo,0);
			myvideo.addChildAt(label,1);
			myvideo.x=144;
			myvideo.y=33;
			test.height=220;
			test.addChild(myvideo);
			_outgoingStream.attachCamera(camera);
			_outgoingStream.publish(_netGroup.convertPeerIDToGroupAddress(_nearID));
		}
		private function activity(event:ActivityEvent):void {
			addEventListener(Event.ENTER_FRAME, init1);
		}
		private function init1(event:Event):void {
			audioInd.Current = 0.05 + mic.activityLevel/100;
		}
		private function _attachPeerVideoAndAudio(streamId:String):void {
			// _groupSpec类似于peerId，实例化接收流
			_incomingStream = new NetStream(_netConnection, _groupSpec);
			// 初始化时的NetStreamClient
			_incomingStream.client = _streamClient;
			// 远程视频接收区
			var remoteVideo1:Video = new Video();
			remoteVideo1.width=142;
			remoteVideo1.height=143;
			remoteVideo1.x=4;
			remoteVideo1.y=4;
			remoteVideo1.name=streamId+"remote";
			// 远程视频流适配为接收数据流
			remoteVideo1.attachNetStream(_incomingStream);
			var label:Label=new Label();
			label.name=streamId+"label";
			label.width=150;
			label.height=20;
			label.setStyle("textAlign","center");
			label.setStyle("color","#ffff00");
			// 实例化流媒体展示组件
			var videoDisplay1:VideoDisplay=new VideoDisplay();
			videoDisplay1.name=streamId;
			videoDisplay1.width=150;
			videoDisplay1.height=151;
			videoDisplay1.setStyle("borderStyle","solid");
			videoDisplay1.setStyle("borderThickness","4");
			videoDisplay1.setStyle("cornerRadius","5");
			videoDisplay1.setStyle("borderColor","#A3A4A9");
			videoDisplay1.setStyle("backgroundImage","http://www.chinesegreat.com/CG/video/assert/bg.jpg");
			videoDisplay1.addChildAt(remoteVideo1,0);
			videoDisplay1.addChildAt(label,1);
			// 播放接收流
			_incomingStream.play(streamId);
			test.addChild(videoDisplay1);

			// 重置共享视频区域布局
			resetVideo();
		}
		private function resetVideo():void {
			var groupAddress:String = _netGroup.convertPeerIDToGroupAddress(_nearID);
			// 用户组长度
			switch (allNeighborId.length) {
				case 0: {
					videoDisplay2=test.getChildByName(groupAddress) as VideoDisplay;
					videoDisplay2.getChildByName(groupAddress+"local").width=142;
					videoDisplay2.getChildByName(groupAddress+"local").height=143;
					videoDisplay2.getChildByName(groupAddress+"label").width=150;
					videoDisplay2.width=150;
					videoDisplay2.height=151;
					videoDisplay2.x=144;
					videoDisplay2.y=33;
				break;
				}
				case 1: {
					videoDisplay2=test.getChildByName(groupAddress) as VideoDisplay;
					videoDisplay2.getChildByName(groupAddress+"local").width=142;
					videoDisplay2.getChildByName(groupAddress+"local").height=143;
					videoDisplay2.getChildByName(groupAddress+"label").width=150;
					videoDisplay2.width=150;
					videoDisplay2.height=151;
					videoDisplay2.x=46;
					videoDisplay2.y=33;

					videoDisplay3=test.getChildByName(allNeighborId[0]) as VideoDisplay;
					videoDisplay3.getChildByName(allNeighborId[0]+"remote").width=142;
					videoDisplay3.getChildByName(allNeighborId[0]+"remote").height=143;
					videoDisplay3.getChildByName(allNeighborId[0]+"label").width=150;
					videoDisplay3.width=150;
					videoDisplay3.height=151;
					videoDisplay3.x=242;
					videoDisplay3.y=33;
				break;
				}
				case 2: {
					videoDisplay2=test.getChildByName(groupAddress) as VideoDisplay;
					videoDisplay2.getChildByName(groupAddress+"local").width=112;
					videoDisplay2.getChildByName(groupAddress+"local").height=113;
					videoDisplay2.getChildByName(groupAddress+"label").width=120;
					videoDisplay2.width=120;
					videoDisplay2.height=121;
					videoDisplay2.x=20;
					videoDisplay2.y=50;
					for (var k:int=0;k<allNeighborId.length;k++) {
						videoDisplay3=test.getChildByName(allNeighborId[k]) as VideoDisplay;
						videoDisplay3.getChildByName(allNeighborId[k]+"remote").width=112;
						videoDisplay3.getChildByName(allNeighborId[k]+"remote").height=113;
						videoDisplay3.getChildByName(allNeighborId[k]+"label").width=120;
						videoDisplay3.width=120;
						videoDisplay3.height=121;
						videoDisplay3.x=20+139*(k+1);
						videoDisplay3.y=50;
					}
					break;
				}	
				case 3: {	
					videoDisplay2=test.getChildByName(groupAddress) as VideoDisplay;
					videoDisplay2.getChildByName(groupAddress+"local").width=92;
					videoDisplay2.getChildByName(groupAddress+"local").height=93;
					videoDisplay2.getChildByName(groupAddress+"label").width=100;
					videoDisplay2.width=100;
					videoDisplay2.height=101;
					videoDisplay2.x=7;
					videoDisplay2.y=55;
					for(var k:int=0;k<allNeighborId.length;k++) {
						videoDisplay3=test.getChildByName(allNeighborId[k]) as VideoDisplay;
						videoDisplay3.getChildByName(allNeighborId[k]+"remote").width=92;
						videoDisplay3.getChildByName(allNeighborId[k]+"remote").height=93;
						videoDisplay3.getChildByName(allNeighborId[k]+"label").width=100;
						videoDisplay3.width=100;
						videoDisplay3.height=101;
						videoDisplay3.x=7+107*(k+1);
						videoDisplay3.y=55;
					}
				break;
				}
				case 4:
				case 5:
				case 6:
				case 7:
					upFourVideo(groupAddress);
				break;
			}
		}
		private function upFourVideo(groupAddress:String):void {
			var k:int = 0;
			for (;k<allNeighborId.length;k++) {
				videoDisplay3=test.getChildByName(allNeighborId[k]) as VideoDisplay;
				videoDisplay3.getChildByName(allNeighborId[k]+"remote").width=92;
				videoDisplay3.getChildByName(allNeighborId[k]+"remote").height=93;
				videoDisplay3.getChildByName(allNeighborId[k]+"label").width=100;
				videoDisplay3.width=100;
				videoDisplay3.height=101;
				videoDisplay3.x=7 + 107*(k%4);
				videoDisplay3.y=6 + 106*parseInt(k/4 + "");
			}
			videoDisplay2=test.getChildByName(groupAddress) as VideoDisplay;
			videoDisplay2.getChildByName(groupAddress+"local").width=92;
			videoDisplay2.getChildByName(groupAddress+"local").height=93;
			videoDisplay2.getChildByName(groupAddress+"label").width=100;
			videoDisplay2.width=100;
			videoDisplay2.height=101;
			videoDisplay2.x=7 + 107*parseInt(k%4 + "");
			videoDisplay2.y=6 + 106*parseInt(k/4 + "");
		}
		private function cancelPeerVideoAndAudio(streamId:String):void {
			test.getChildByName(streamId).width=0;
			test.getChildByName(streamId).height=0;
			test.getChildByName(streamId).visible=false;
			resetVideo();
		}
		protected function clearNetGroup():void {
			_netGroup.close();
			_netGroup.removeEventListener(NetStatusEvent.NET_STATUS, onNetGroupStatus);
			_netGroup = null;
		}
	 private function showControlBar():void {
			message.toolbar.parent.removeChild(message.toolbar);
			message.toolbar.removeChild(message.linkTextInput);
			message.toolbar.removeChild(message.bulletButton);
			message.toolbar.removeChild(message.alignButtons);
			message._RichTextEditor_VRule1.visible=false;
			message._RichTextEditor_VRule2.visible=false;
			message.textArea.height=70;
			message.colorPicker.width=24;
			message.colorPicker.height=24;
			message.italicButton.width=24;
			message.italicButton.height=24;
			message.boldButton.width=24;
			message.boldButton.height=24;
			message.underlineButton.width=24;
			message.underlineButton.height=24;
			message.addChildAt(message.toolbar,0);
		} 	
		public function close(type:int):void {
			Alert.yesLabel="确定";
			Alert.noLabel="取消";
			if(type==1)
				Alert.show("确定要退出视频！", "提示", 3, null, alertClickHandler);
			else if(type==2)
				Alert.show("确定要删除此用户吗？", "提示", 3, null, ckHandle);
			else {
				_netConnection.close();
				_outgoingStream.close();
				_netConnection=null;
				_outgoingStream=null;
				clearNetGroup();
				Alert.show("管理员已禁用你的视频！", "提示", 1, null, quitVideo);
			}
		}
		private function alertClickHandler(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				_netConnection.close();
				_outgoingStream.close();
				_netConnection=null;
				_outgoingStream=null;
				clearNetGroup();
				ExternalInterface.call("EndOfCall");
			}
		}
		private function quitVideo(event:CloseEvent):void {
			if (event.detail==Alert.YES)
				ExternalInterface.call("EndOfCall");
		}
		// 说话音量调节
		private function speakerVolumeChanged(e:SliderEvent):void {
			if (_incomingStream) {
				var st:SoundTransform = new SoundTransform(e.value);
				_incomingStream.soundTransform = st;
				audioInd1.Current = 0.05 + e.value;
			}
		}
		// 耳麦音量调节
		private function micVolumeChanged(e:SliderEvent):void {
			var mic:Microphone = Microphone.getMicrophone(micIndex);
			if (mic)
				mic.gain = e.value;
		}
		//用回车键提交信息
		private function onKeyDown(e:KeyboardEvent):void {
			//如果按下Enter时还按下Shift/Ctrl，则换行
			if( e.keyCode==Keyboard.ENTER && (e.shiftKey || e.ctrlKey)) {
				callLater(function():void {//注意这个callLater
					var msg:String = message.text;
					var part1:String = msg.substring(0, message.textArea.selectionBeginIndex);
					var part2:String = msg.substring(message.textArea.selectionEndIndex, 0x7fffffff);
					var selIndex:int = message.textArea.selectionBeginIndex + 1;
					message.text = part1 + "\n" + part2;
					message.textArea.setSelection(selIndex,selIndex);
				});
				keyCode = -1; //标识本次按键不需要TEXT_INPUT事件配合处理
				return;
			}
			shiftKey = e.shiftKey;
			ctrlKey = e.ctrlKey;
			keyCode = e.keyCode;
		}
		private function onTextInput(evt:TextEvent):void{
			if (keyCode == -1)
				return;
			if (keyCode==Keyboard.ENTER && !shiftKey && !ctrlKey && message.text !="") {
				evt.preventDefault();		 
				callLater(function():void{		 
					//sendMessage()即为发送消息的方法，它应该返回一个Boolean值，以此来决定是否清空消息框 
					if( onPostMessage()){
						message.text = "";
						message.htmlText = "";
						message.textArea.setSelection(0,0);		 
					}
				});
			}
		}
		//消息滚动在最底 
		private function handleMessage(event:Event):void {
			if (info.verticalScrollPosition < info.maxVerticalScrollPosition)
				info.verticalScrollPosition = info.maxVerticalScrollPosition;
		}
		private function stopVideo():void {
			camera=null;
			_outgoingStream.attachCamera(camera);
			stopVideoButton.visible=false;
			sendVideoButton.visible=true;
			sendVideoButton.x=10;
		}
		private function sendVideo():void { 	
			camera=Camera.getCamera();
			_outgoingStream.attachCamera(camera);
			stopVideoButton.visible=true;
			sendVideoButton.visible=false;
		}
		//播放声音
		private function playSound():void {
			var snd:Sound = new Sound();
			var req:URLRequest = new URLRequest("http://www.chinesegreat.com/CG/videoRing.mp3");
			snd.load(req);
			snd.play();
		}
		public function ckHandle(event:CloseEvent):void{
			if (event.detail==Alert.YES)
				_netGroup.sendToAllNeighbors(dg.selectedItem.peerId);
		}
	]]>
	</mx:Script>
	<mx:Panel borderStyle="none" layout="vertical" width="489" height="515" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="totalArea" backgroundColor="#F7FAFF" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="0" title="*欢迎咨询，轻松注册后享受更多的优质服务*" backgroundAlpha="0.92" alpha="1.0" fontSize="12" fontFamily="Arial" themeColor="#F7FAFF">
		<mx:VBox paddingLeft="10"><mx:Canvas borderStyle="solid" cornerRadius="2" id="test" height="230" borderColor="#B7BABC" borderThickness="1" width="438"/></mx:VBox>
		<mx:VBox>
			<mx:HBox width="489" paddingLeft="10">
				<mx:Image source="@Embed('/assert/video.jpg')" useHandCursor="true" buttonMode="true" id="stopVideoButton" click="stopVideo()" height="22"/>
				<mx:Image source="@Embed('/assert/video2.jpg')" useHandCursor="true" buttonMode="true" visible="false" id="sendVideoButton" click="sendVideo()" height="22"/>
				<mx:Image source="@Embed('/assert/micVol.jpg')" height="22"/>
				<mx:HSlider id="micVolumeSlider" trackSkin="STSliderTrackSkin" value="90" width="75" showDataTip="false" minimum="0" maximum="100" change="micVolumeChanged(event)"/>
				<mx:Label width="30"/>
				<mx:Image source="@Embed('/assert/speakVol.jpg')" height="22"/>
				<mx:HSlider id="speakerVolumeSlider" trackSkin="STSliderTrackSkin" showDataTip="false" value="0.9" width="75" minimum="0" maximum="1" change="speakerVolumeChanged(event)"/>
			</mx:HBox>

			<mx:HBox paddingLeft="10"><mx:TextArea width="438" height="100" id="info" editable="false"/></mx:HBox>
			<mx:HBox>
				<mx:RichTextEditor borderStyle="none" id="message" creationComplete="showControlBar();" width="380" height="120" paddingBottom="-12" backgroundColor="#F7FAFF" textAlign="left" fontStyle="normal" fontFamily="Verdana" horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="0" paddingRight="0" headerHeight="0" fontSize="12"/>
				<mx:VBox paddingTop="30" id="buttonArea">
					<mx:PopUpButton id="popUpButton_pic" icon="@Embed('/assert/mag.jpg')" useHandCursor="true" buttonMode="true" visible="false" openAlways="true" toolTip="请选择要删除的用户" paddingLeft="20" width="60" height="0">	
						<mx:popUp>
							<mx:TitleWindow id="titleWindow_popUp" headerHeight="9" width="230" height="200" borderColor="#ACC6FC" verticalScrollPolicy="off" horizontalScrollPolicy="off" close="popUpButton_pic.close();">
								<mx:DataGrid dataProvider="{allUserInfo}" id="dg"> 
		 							<mx:columns>
		 								<mx:DataGridColumn dataField="userName" headerText="用户名" width="100"/>
		 								<mx:DataGridColumn dataField="peerId" visible="false" width="0"/>
		 								<mx:DataGridColumn headerText="操作" width="90"><mx:itemRenderer><mx:Component><mx:Button label="删除" click="outerDocument.close(2)"/></mx:Component></mx:itemRenderer></mx:DataGridColumn>
		 							</mx:columns>
								</mx:DataGrid>
							</mx:TitleWindow>
						</mx:popUp>
					</mx:PopUpButton>

					<mx:VBox paddingTop="3">
	 					<mx:Button id="closeBtn" label="发送" click = "onPostMessage()" fontFamily="Arial" width="60" fillAlphas="[0.77, 0.89, 0.45, 0.45]" fillColors="[#D3E7F7, #FCFCFC]" alpha="0.8" fontSize="12" cornerRadius="5" fontWeight="bold"/>
	 					<mx:Button id="sendMessageBtn" label="关闭" width="60" click="close(1)" fillAlphas="[0.77, 0.89, 0.45, 0.45]" fillColors="[#D3E7F7, #FCFCFC]" alpha="0.8" fontFamily="Arial" fontSize="12" cornerRadius="5" fontWeight="bold"/>
					</mx:VBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
	</mx:Panel>
</mx:Application>
