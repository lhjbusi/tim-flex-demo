<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="connectFMS();" width="408" height="152">
	<mx:Script>
		<![CDATA[
			import com.tim.chinesegreat.Constants;

			private var netConn:NetConnection;

			/**
			 * 页面初始化.
			 */
			private function connectFMS():void {
				netConn = new NetConnection();
				netConn.addEventListener(NetStatusEvent.NET_STATUS, netConnectionHandler);
				netConn.client = this;

				var params:String = Application.application.parameters.initValue;

				//var params:String = ExternalInterface.call("getUserInfo");
				var userId:String, userName:String, roomId:String, calleeId:String = null;
				var arrs:Array = params.split(";");
				if (params != null) {
					userId = arrs[0];
					userName = arrs[1];
					if (arrs.length > 2) {
						roomId = arrs[2];
					}
					if (arrs.length > 3) {
						calleeId = arrs[3];
					}
				}
				netConn.connect(Constants.rtmpUrl, userId, userName, roomId, calleeId);
			}
			private function netConnectionHandler(event:NetStatusEvent):void {
				switch (event.info.code) {
					case "NetConnection.Connect.Success":
						// 暴露请求方法.
						ExternalInterface.addCallback("sendRequest", sendRequest);
						// 被请求者请求处理结果.
						ExternalInterface.addCallback("calleeHandlerResult", calleeHandlerResult);
					break;
					case "NetConnection.Connect.Rejected":
					case "NetConnection.Connect.Closed":
					break;
				}
			}
			/**
			 * 向被请求者提示.
			 */
			public function calleeConfirm(callerId:String, callerName:String, requestType:String, roomId:String, calleeId:String):void {
				// 调用页面JS提醒被呼叫者
				ExternalInterface.call("calleeConfirm", callerId, callerName, requestType, roomId, calleeId);
			}
			/**
			 * 被请求者请求处理结果.
			 */
			private function calleeHandlerResult(callerId:String, callerName:String, requestType:String, result:String, roomId:String, calleeId:String):void {
				netConn.call("sendRequestStatus", null, callerId, requestType, result, roomId, calleeId);
			}
			/**
			 * 告知请求者，被请求者正在处理请求.
			 */
			public function sendRequestResult(calleeId:String, requestType:String):void {
				// TODO 告知请求者正在处理.
			}
			/**
			 * 请求处理结果.请求者接收被请求者处理结果
			 */
			public function requestStatusResult(calleeId:String, calleeName:String, requestType:String, status:String, roomId:String, teacherId:String):void {
				ExternalInterface.call("requestResult", calleeId, calleeName, requestType, status, roomId, teacherId);
			}
			/**
			 * 向指定用户发送特定请求.
			 */
			private function sendRequest(requestType:String, roomId:String, teacherId:String):void {
				netConn.call("sendRequest", null, requestType, roomId, teacherId);
			}
			/**
			 * 用户不在线.
			 */
			public function userIsOffline():void {
				ExternalInterface.call("userIsOffline");
			}
			/**
			 * 无效的请求.
			 */
			public function invalidRequest(calleeName:String, result:int):void {
				ExternalInterface.call("invalidRequest", calleeName, result);
			}
		]]>
	</mx:Script>
</mx:Application>
