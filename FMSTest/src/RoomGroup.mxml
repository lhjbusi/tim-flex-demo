<?xml version="1.0" encoding="utf-8"?>
<mx:Application backgroundColor="#ffffff" borderStyle="none" width="430" height="700" layout="absolute" creationComplete="init()" xmlns:mx="http://www.adobe.com/2006/mxml">
<mx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
		import flash.events.TimerEvent;
		import flash.utils.Timer;
		import mx.controls.Alert;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.core.UIComponent;
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.events.SliderEvent;
		import mx.formatters.DateFormatter;
		import mx.utils.ObjectUtil;
	
		private var keyCode:int;
		private var shiftKey:Boolean;
		private var ctrlKey:Boolean;
		private var remoteVideo:Video;
		private var localVideo:Video;
		private var micIndex:int = 0;
		private var audioInd:Indicator;
		private var audioInd1:Indicator;
		private var uc:UIComponent= new UIComponent();
		// 开始时间
		private var startDate:Number = 0;
		// 收费监控
		private var chargeTimer:Timer;
		// 是否开始课时费收取
		private var beginPeriodFee:Boolean = false;
		// 已使用的免费秒数
		private var currFreeSec:int = 0;
		// 已使用的课时费秒数
		private var currPeriodSec:int = 0;
		// 是否是老师
		private var isTeacher:Boolean = false;
		// 免费使用的时间(分钟)-超过自动开始计算平台费
		private const freeMin:int = 1;
		private var _netGroup:NetGroup;	
		private var _groupSpec:String;
		private var _groupSpecifier:GroupSpecifier;
		//服务器对象
		private var sharedObj:SharedObject = null;

		[Bindable]private var forChinesegreatFee:Number=1;
		[Bindable]private var time:String="00:00:00";
		[Bindable]private var totalEarning:String='0';
		[Bindable]private var cost:String='0';
		[Bindable]private var student:Array = [{stuName:userName, stuTime:time,stuFee:roomFee,forChi:platFee,totalEarn:totalEarning}];
		[Bindable]private var teacher:Array = [{teaName:userName, stuTime:time,stuFee:roomFee,forChi:platFee,totalCost:cost}];
		[Bindable]private var p2pConnection:NetConnection;
		[Bindable]private var myStream:NetStream;
		[Bindable]private var controlStream:NetStream;
		[Bindable]private var cards:Array = new Array(
			{label:"USD",data:1000}, {label:"EUR",data:1327}, {label:"CAD",data:1005},
			{label:"AUD",data:1072}, {label:"GBP",data:1585}, {label:"JPY",data:630},
			{label:"CHF",data:1098}, {label:"NZD",data:838}, {label:"RMB",data:160}
		);
		[Bindable]private var camera:Camera;
		[Bindable]private var mic:Microphone;
		//视频关闭按钮标识 0 发送视频 ，1 停止视频
		[Bindable]private var flag:Number=0;
		//对方的用户名，老师或学生的用户名
		[Bindable]private var userName:String;
		[Bindable]private var roomFee:Number=0;
		[Bindable]private var loginState:int=0;
		[Bindable]private var credits:Number=0;
		// 课时费计费插入时间
	 	[Bindable]private var periodDate:String="";
		// 平台费计费插入时间
		[Bindable]private var platformDate:String="";
		// 自身编号
		[Bindable]private var myId:String;
		// 另一用户编号
		[Bindable]private var userId:String;
		//自己的用户名
		[Bindable]private var myName:String="qiu"+Math.floor(Math.random() * 100);
		[Bindable]private var language:String;
		[Bindable]private var lan:Array=new Array();
		[Bindable]private var platFee:Number=0;
		[Bindable]private var _nearID:String;
		//组播参数
		[Bindable]private var outgoingStreamp2p:NetStream;
		[Bindable]private var incomingStreamp2p:NetStream;
		//fms 参数
		[Bindable]private var fmsConnection:NetConnection;
		[Bindable]private var outgoingStreamFMS:NetStream;
		[Bindable]private var incomingStreamFMS:NetStream;
		// 房间名称
		[Bindable]private var roomName:String;

		private var lan_cn:Array = new Array({student:"学 生",duration:"时 长",total:"老 师",fee:"网络教室",net:"净收入",teacher:"教 师",
			teacher1:"教师费用",total1:"总支付",ok:"确定",cancel:"取消",close_window:"是否要关闭本窗口?",disconnected:"对方已断开连",
			balance_insufficient:"请充值，您的余额不足",charging_started:"开始计费",prompt:"提示",points_insufficient:"积分不够，停止计时！",
			charging_stopped:"停止计费",send:"发送",close:"关闭",charge_area:"计费区",current_balance:"您当前的余额为",overbalance:"超出余额！",
			course_fee_modified:"课时费用将修正为",course_fee_abnormal:"您输入的课时费用不正常",rejected_charging_request:"对方没有同意计费请求"}
		);
		private var lan_us:Array= new Array({student:"Student",duration:"Duration",total:"Total",fee:"Fee",net:"Net Points",teacher:"Teacher",
			teacher1:"Teacher Fee",total1:"Total",ok:"Ok",cancel:"Cancel",close_window:"Are you sure want to leave this page?",
			disconnected:"Disconnected on the other side",balance_insufficient:"Your balance is insufficient, please recharge",
			charging_started:"Start",prompt:"Prompt",points_insufficient:"Points are insufficient,timing stopped!",charging_stopped:"Stop",
			send:"Send",close:"Close",charge_area:"Charge area",current_balance:"Your balance",overbalance:"Overbalance！",
			charging_start_hint:"Charging started",charging_stop_hint:"Charging stopped",course_fee_modified:"course fees will be modified as",
			course_fee_abnormal:"The course fees you enter is abnormal",rejected_charging_request:"charging request rejected on the other side"}
		);
	
		/**
		 * Flash初始化.
		 */
		private function init():void {
			// 获取请求参数
			var ss:String=ExternalInterface.call("returnTheName");
			//var ss:String="qiuqwe;137;812;5;12;US;2;student";
			var ss1:Array=ss.split(";");
			// 设置我的名称
			myName=ss1[0];
			// 设置我的编号
			myId=ss1[1];
			// 当前点数
			credits=ss1[2];
			// 课时费
			roomFee=ss1[3];
			// 教室名称
			roomName="room"+ss1[4];
			// Flash语言
			language =ss1[5];
			// 平台费
			platFee=ss1[6];
			if (ss1[7]=="teacher") {
				userId = ss1[8]
				isTeacher = true;
				loginState=0;
			} else {
				loginState=1;
				feeRequestBtn.visible=false;
			}
			lan =lan_cn;
			if (!(language=="CN"))
				lan =lan_us;
			feeArea.text=credits.toString();
			// 点数转换为美元
			changeCredits();
			// 初始化音频
			initAudio();
	
			//p2p连接
			p2pConnection = new NetConnection();
			p2pConnection.addEventListener(NetStatusEvent.NET_STATUS, netConnectionHandler);
			p2pConnection.connect(ClassRoomConstant.rtmfp);
			//fms连接
			fmsConnection = new NetConnection();
			fmsConnection.addEventListener(NetStatusEvent.NET_STATUS, fmsconnectionHandler);
			// 连接至FMS
			fmsConnection.connect(ClassRoomConstant.rtmp, myName, credits, roomName);
			fmsConnection.client=this;
	
			info.addEventListener(FlexEvent.UPDATE_COMPLETE,handleMessage);
			message.textArea.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
			message.textArea.addEventListener(TextEvent.TEXT_INPUT,onTextInput);
		}
	 	//p2p 连接处理
	 	private function netConnectionHandler(e:NetStatusEvent):void {
	 		switch (e.info.code) {
				case "NetConnection.Connect.Success":
					_nearID = e.target.nearID;
					joinNetGroup();
				break;
				case "NetStream.Connect.Success":
				break;
				case "NetGroup.Connect.Success":
					//成功加入组后发布音视频	
					publishVideo("p2p");
					if (isTeacher) {
						feeRequestBtn.enabled = true;
					}
					// 运行定时器
					if (chargeTimer == null || !chargeTimer.running) {
						chargeTimer = new Timer(1000);
						chargeTimer.start();
						chargeTimer.addEventListener(TimerEvent.TIMER, chargeTimerHandler);
					}
				break;
				case "NetGroup.Connect.Failed":
					clearNetGroup();
				break; 
			}
		}
		/**
		 * 费用收取检测.
		 */
		private function chargeTimerHandler(event:TimerEvent):void {
			// 平台费使用秒数累加
			currFreeSec ++;
			// 平台费计费-老师端运行
			if (isTeacher && currFreeSec >= freeMin*60 && currFreeSec%60 == 0) {
				// 向Java请求平台费记录
				platformFeeHandler();
			}
			// 教室计费
			if (beginPeriodFee) {
				currPeriodSec ++;
				if (isTeacher) {// 老师处理
					if (currPeriodSec%60 == 0) {// 已满一分钟
						student[0].totalEarn=(roomFee*currPeriodSec/60)+'(credits)';
						periodFeeRecord.send();
					}
					student[0].stuTime=convertSecondToDate(currPeriodSec);
					student[0].stuName=userName;
					stu.dataProvider=student;
				} else {// 学生处理
					if (currPeriodSec%60 == 0) {// 已满一分钟
						teacher[0].totalCost=(roomFee*currPeriodSec/60)+'(credits)';
					}
					teacher[0].stuTime=convertSecondToDate(currPeriodSec);
					teacher[0].stuFee=roomFee+'(credits)';
					tch.dataProvider=teacher;
				}
			}
		}
		/**
		 * 将秒数转换为hh:mm:ss时间格式字符串.
		 */
		private function convertSecondToDate(second:int):String {
			var hour:int = second/3600;
			var min:int = second/60;
			var sec:int = second%60;
			return (hour<10?"0":"")+hour+":"+(min<10?"0":"")+min+":"+(sec<10?"0":"")+sec;
		}
		/**
		 * 平台费监控处理.
		 */
		private function platformFeeHandler():void {
			// 计费
			platformFeeRecord.send();
		}
		private function joinNetGroup():void {
			//创建群组并加入
			_groupSpecifier = new GroupSpecifier(roomName);
			_groupSpecifier.multicastEnabled = true;
			_groupSpecifier.objectReplicationEnabled = true;
			_groupSpecifier.postingEnabled = true;
			_groupSpecifier.routingEnabled = true;
			_groupSpecifier.serverChannelEnabled = true;
			_groupSpec = _groupSpecifier.groupspecWithoutAuthorizations();
			_netGroup = new NetGroup(p2pConnection, _groupSpec);
			_netGroup.addEventListener(NetStatusEvent.NET_STATUS, onNetGroupStatus);
		}
		protected function onNetGroupStatus(event:NetStatusEvent):void {	
			switch(event.info.code) {
				case "NetGroup.Posting.Notify":
					// 处理方法post() ，向所有用户广播包括自己在内
					info.htmlText+="<font color='#0000ff' face='Arial' size='13'>"+event.info.message.user +"&nbsp;&nbsp;&nbsp;"+event.info.message.date+ "</font>\n" +"<textformat leftMargin='20'>"+event.info.message.htmlText+ "</textformat>";
				break;
				case "NetGroup.Neighbor.Connect":
					if (event.info.neighbor != _netGroup.convertPeerIDToGroupAddress(_nearID)) {
						if (outgoingStreamFMS) {
							outgoingStreamFMS.close();
							outgoingStreamFMS = null;
						}
						if (incomingStreamFMS) {
							incomingStreamFMS.close();
							incomingStreamFMS = null;
						}
						fmsConnection.close();
						recieveVideo("p2p", event.info.neighbor);
						feeRequestBtn.enabled=true;
						doPost();
					}
				break;
				case "NetGroup.Neighbor.Disconnect":
					// 处理用户退出
					feeRequestBtn.enabled=false;
					Alert.yesLabel=lan[0].ok;
					Alert.noLabel=lan[0].cancel;
					Alert.show(lan[0].close_window, lan[0].disconnected, 3, null, alertClickHandler);
				break;
				case "NetGroup.SendTo.Notify":
					//处理方法sendToAllNeighbors() ，除了自己外其他所有用户广播
					if (event.info.message.name=="stopFeeForStudent") {
						Alert.show(lan[0].charging_stopped, lan[0].prompt);
						// 停止课时费收取
						stopPeriodFee();
					}
					// 开始计费
					if (event.info.message.name=="startPeriodFee") {
						// 开始课时费记录
						beginPeriodFee = true;
						feeRequestBtn.enabled = true;
						feeRequestBtn.label=lan[0].charging_stopped;
						feeRequestBtn.setStyle("color", "#ff0000");
						student[0].stuFee=roomFee+'(credits)';
						student[0].stuName=userName;
					}
					// 取消计费
					if (event.info.message.name == "cancelFeeRequest") {
						feeRequestBtn.enabled = true;
						Alert.show(lan[0].rejected_charging_request+"\n"+lan[0].teacher1+": " + roomFee);
					}
					// 更新用户点数
					if (event.info.message.name=="updateCredits") {
						var userCredits:String = event.info.message.userCredits;
						feeArea.text=userCredits;
						credits=Number(userCredits);
						changeCredits();
						if (credits<roomFee) {
							Alert.show(lan[0].balance_insufficient, lan[0].prompt, 1, null, charge);
							var func_msg:Object = new Object;
							func_msg.name = "notEnoughCredits";
							_netGroup.sendToAllNeighbors(func_msg);
						}
					}
					// 没有足够的点数-P2P
					if (event.info.message.name=="notEnoughCredits") {
						feeRequestBtn.enabled=false;
						Alert.show(lan[0].points_insufficient);
					}
					if (event.info.message.name=="sendParameter") {
						var uName:int=ObjectUtil.toString(event.info.message).indexOf("cgusername");
						if (uName !=-1) {
							var temp:Array = ObjectUtil.toString(event.info.message).split(":");
							userName=temp[1];
						}
					}
					// 学生课时费确认-P2P
					if (event.info.message.name == "feeConfirm") {
						// 课时费
						var fee:int = event.info.message.roomFee;
						roomFee=fee;
						if (credits<fee) {
							Alert.show(lan[0].balance_insufficient, lan[0].prompt, 1, null, charge);
							// 停止课时费收取
							stopPeriodFee();
							//TODO 学生课时费不够
						} else {
							// 设置老师名称
							teacher[0].teaName=event.info.message.userName;
							Alert.show(userName+lan[0].charging_started+"\n"+lan[0].teacher1+": "+fee, lan[0].prompt, Alert.OK | Alert.CANCEL, null, feeConfirmHandler);
						}
					}
				break;
			}
		}
		/**
		 * 学生课时费确认处理.
		 */
		private function feeConfirmHandler(event:CloseEvent):void {
			beginPeriodFee = (event.detail == Alert.OK);
			var methodName:String = (event.detail == Alert.OK ? "startPeriodFee" : "cancelFeeRequest");
			// P2P处理
			if (incomingStreamFMS == null) {
				var msg:Object = new Object();
				msg.name = methodName;
				_netGroup.sendToAllNeighbors(msg);
			} else {// FMS处理
				this.sharedObj.send(methodName);
			}
		}
		private function alertClickHandler(event:CloseEvent):void {
			if (event.detail==Alert.YES) {
				closeMessage();
			}
		}
		private function publishVideo(type:String):void {	
			//发布自己的音视频
			camera= Camera.getCamera();
			mic= Microphone.getMicrophone();
			if (camera) {
				camera.setMode(320, 240, 15);
				camera.setQuality(0, 80);
				var localVideo:Video= new Video();
				localVideo.width = localVideoDisplay.width;
				localVideo.height = localVideoDisplay.height;
				localVideo.x=0;
				localVideo.y=0;
				// 指定播放视频时使用平滑处理(插补数据)
				localVideo.smoothing = true;
				localVideo.attachCamera(camera);
				localVideoDisplay.addChild(localVideo);
			}
			if (mic){
				mic.codec = SoundCodec.SPEEX;
				mic.framesPerPacket = 1;
				mic.encodeQuality = 10;
				mic.setSilenceLevel(0);
			}
			if (type=="fms") {
				outgoingStreamFMS = new NetStream(fmsConnection);
				outgoingStreamFMS.client=this;
				if (camera != null) {
					outgoingStreamFMS.attachCamera(camera);
				}
				if (mic != null) {
					outgoingStreamFMS.attachAudio(mic);
				}
				outgoingStreamFMS.publish("room"+myName);
			} else {
				outgoingStreamp2p = new NetStream( p2pConnection, _groupSpec );	
				if (camera != null) {
					outgoingStreamp2p.attachCamera(camera);
				}
				if (mic != null) {
					outgoingStreamp2p.attachAudio(mic);
				}
				outgoingStreamp2p.publish( _netGroup.convertPeerIDToGroupAddress(_nearID));
			}
		}
		private function recieveVideo(type:String,i:String):void {
			//播放接受到的音视频	
			incomingStreamp2p = new NetStream( p2pConnection, _groupSpec );
			incomingStreamp2p.play(i);					
			var remoteVideo:Video = new Video();				
			remoteVideo.width = remoteVideoDisplay.width;
			remoteVideo.height = remoteVideoDisplay.height;
			remoteVideo.x=0;
			remoteVideo.y=0;
			remoteVideo.attachNetStream(incomingStreamp2p);
			remoteVideoDisplay.addChild(remoteVideo);	
		}
		protected function clearNetGroup():void {
			//断开组播
			_netGroup.close();			
			_netGroup.removeEventListener(NetStatusEvent.NET_STATUS, onNetGroupStatus);
			_netGroup = null;
		}
		private function doPost():void {
			//向组内所有用户广播并传参
			var message_username:Object = new Object; 
			message_username.name="sendParameter";
			message_username.user = "cgusername:"+myName+":"+_netGroup.convertPeerIDToGroupAddress(_nearID)+":";
			_netGroup.sendToAllNeighbors(message_username);
		}
		//fms 连接处理
		private function fmsconnectionHandler(e:NetStatusEvent):void{
			switch (e.info.code) {
				//fms 连接处理
				case "NetConnection.Connect.Success":
					publishVideo("fms");
					if (!sharedObj) {
						sharedObj = SharedObject.getRemote(roomName, fmsConnection.uri, true);
						sharedObj.client = this;
						sharedObj.addEventListener(SyncEvent.SYNC, _netSync);
						sharedObj.connect(fmsConnection);
					 }
				break; 
				case "NetConnection.Connect.Closed":
				break; 
				case "NetStream.Connect.Success":
				break; 
				case "NetConnection.Connect.Failed":
				break; 
				case "NetStream.Connect.Closed":
				break;
			}
		}
		private function _netSync(evt:SyncEvent):void {
			//fms 同步事件
			for each(var item:Object in evt.changeList) {
				switch(item.code){
					case "change":
					case "success":
						if (item.name == "Members") {
							resetMembers();
						}
					break;
					case "reject":
					break;
					case "delete":
					break;
				}					
			}
		}
		private function resetMembers():void {
			if (sharedObj.data.Members is Array) {
				var _ar:Array = sharedObj.data.Members;
				for (var i:int = 0; i < _ar.length; i++) {
					if (_ar[i].myName!= myName) { 
						if (loginState==0) {//两人已连接
							feeRequestBtn.enabled=true;
						}
						// 运行定时器
						if (chargeTimer == null || !chargeTimer.running) {
							chargeTimer = new Timer(1000);
							chargeTimer.start();
							chargeTimer.addEventListener(TimerEvent.TIMER, chargeTimerHandler);
						}
						userName=_ar[i].myName;
						incomingStreamFMS= new NetStream(fmsConnection);
						incomingStreamFMS.client=this;
						remoteVideo = new Video();
						remoteVideo.width = remoteVideoDisplay.width;
						remoteVideo.height =remoteVideoDisplay.height;
						remoteVideo.x=0;
						remoteVideo.y=0;
						remoteVideo.smoothing = true;
						remoteVideo.attachNetStream(incomingStreamFMS);
						remoteVideoDisplay.addChild(remoteVideo);
						incomingStreamFMS.play("room"+_ar[i].myName);
					}
				}
			}
		}
		private function stopVideo(num:Number):void {
			//0 发送视频， 1 停止视频
			if (num==0) {
				flag=1;
				stopVideoButton.source='assert/video2.jpg';
				localVideoDisplay.setStyle("backgroundImage","assert/1.jpg");
				camera=null;
				outgoingStreamp2p.attachCamera(camera);
			} else {
				camera = Camera.getCamera();
				flag=0;
				stopVideoButton.source='assert/video.jpg';	
				outgoingStreamp2p.attachCamera(camera);
			}	
		}
		private function send():Boolean {
			if (message.text=="") {
				ExternalInterface.call("showMsg");
				return false;
			} else {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "YYYY/MM/DD HH:NN:SS";
				var date:String = dateFormatter.format(new Date());
				info.htmlText+="<font color='#008040' face='Arial' size='13'>"+myName+"&nbsp;&nbsp;&nbsp;"+date+ "</font>\n" +"<textformat leftMargin='20'>"+ message.htmlText + "</textformat>";
				 //p2p 发送文字聊天
				if (incomingStreamFMS == null) {
					var chat_message:Object = new Object; 
					chat_message.user=myName;
					chat_message.date=date;
					chat_message.htmlText="<textformat leftMargin='20'>"+ message.htmlText + "</textformat>";
					_netGroup.post(chat_message);
					message.text="";
					return true;
				} else {
					//fms 发送文字聊天
					this.sharedObj.send("sendNews", myName, message.htmlText);
				}
				message.text="";
				return true;
			}
		}
		// fms 发送文字聊天
		public function sendNews(uName:String , message:String ,obj:Object=null):void {
			if (uName !=myName) {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "YYYY/MM/DD HH:NN:SS";
				var date:String = dateFormatter.format(new Date());
				info.htmlText += "<font color='#0000ff' face='Arial' size='13'>"+uName +"&nbsp;&nbsp;&nbsp;"+date+ "</font>\n" +"<textformat leftMargin='20'>" + message +"</textformat>";
				ExternalInterface.call("focusOn");
			}
		}
		// 关闭HTML页面
		private function closeMessage():void {
			ExternalInterface.call("closeMessage");
		}
		private function closeHandler(event:Event):void {
			var money:Number=(credits*10)/ComboBox(event.target).selectedItem.data;
			rate1.text=money.toFixed(2).toString();
		}
		private function changeCredits():void {
			var money:Number=(credits*10)/rate2.selectedItem.data;
			rate1.text=money.toFixed(2).toString();
		}
		// fms 扣费
		public function updateCredits(credit:String):void {
			if (!isTeacher) {
				feeArea.text=credit;
				credits=Number(credit);
				changeCredits();
				if (Number(credit)<roomFee) {
					Alert.show(lan[0].prompt,lan[0].balance_insufficient, 1, null, charge);
					this.sharedObj.send("notEnoughCredits");
				}
			}
		}
		// fms停止计费
		public function stopFeeForStudent(obj:Object=null):void {
			if (!isTeacher) {
				Alert.show(lan[0].charging_stopped, lan[0].prompt);
				// 停止课时费收取
				stopPeriodFee();
			}
		} 
		// fms停止计费
		public function notEnoughCredits(obj:Object=null):void {
			if (isTeacher) {
				feeRequestBtn.enabled=false;
				Alert.show(lan[0].points_insufficient);
			}
		} 
		// fms开始课时计费
		public function startPeriodFee():void {
			if (isTeacher) {
				// 开始课时费记录
				beginPeriodFee = true;
				feeRequestBtn.enabled = true;
				feeRequestBtn.label=lan[0].charging_stopped;
				feeRequestBtn.setStyle("color", "#ff0000");
				student[0].stuFee=roomFee+'(credits)';
				student[0].stuName=userName;
			}
		}
		// FMS停止课时计费
		public function cancelFeeRequest():void {
			if (isTeacher) {
				feeRequestBtn.enabled = true;
				Alert.show(lan[0].rejected_charging_request+"\n"+lan[0].teacher1+": "+roomFee);
			}
		}
		// fms p2p公共方法
		// 用户充值
		private function charge(event:CloseEvent):void {
			if (event.detail==Alert.YES) {
				ExternalInterface.call("charge");
			}
		}
		private function showControlBar():void {
			//显示文本控制按钮
			message.toolbar.parent.removeChild(message.toolbar);
			message.toolbar.removeChild(message.linkTextInput);
			message.toolbar.removeChild(message.bulletButton);
			message.toolbar.removeChild(message.alignButtons);
			message._RichTextEditor_VRule1.visible=false;
			message._RichTextEditor_VRule2.visible=false;
			message.fontFamilyArray.push("宋体");
			message.fontFamilyArray.push("黑体");
			message.fontFamilyCombo.width=145;
			message.fontFamilyCombo.height=24;
			message.fontSizeCombo.height=24;
			message.textArea.height=60;
			message.colorPicker.width=24;
			message.colorPicker.height=24;
			message.italicButton.width=24;
			message.italicButton.height=24;
			message.boldButton.width=24;
			message.boldButton.height=24;
			message.underlineButton.width=24;
			message.underlineButton.height=24;
			message.addChildAt(message.toolbar,0);
		}
		private function onTextInput(evt:TextEvent):void {	 
			if (keyCode == -1)
				return;
			if (keyCode==Keyboard.ENTER && !shiftKey && !ctrlKey && message.text !="") {
				evt.preventDefault();
				callLater(function():void {
					//sendMessage()即为发送消息的方法，它应该返回一个Boolean值，以此来决定是否清空消息框 
					if (send()) {
						message.text = "";
						message.htmlText = "";
						message.textArea.setSelection(0,0);
					}
				});
			}
		}
		private function handleMessage(event:Event):void { 
			if (info.verticalScrollPosition < info.maxVerticalScrollPosition) { 
				info.verticalScrollPosition = info.maxVerticalScrollPosition; 
			}
		}
		private function onKeyDown(e:KeyboardEvent):void {
			//如果按下Enter时还按下Shift/Ctrl，则换行
			if (e.keyCode==Keyboard.ENTER && (e.shiftKey || e.ctrlKey)) {
				callLater(function():void { //注意这个callLater
					var msg:String = message.text;
					var part1:String = msg.substring(0, message.textArea.selectionBeginIndex);
					var part2:String = msg.substring(message.textArea.selectionEndIndex, 0x7fffffff);
					var selIndex:int = message.textArea.selectionBeginIndex + 1;
					message.text = part1 + "\n" + part2;
					message.textArea.setSelection(selIndex, selIndex);
				});
				keyCode = -1; //标识本次按键不需要TEXT_INPUT事件配合处理
				return;
			}
			shiftKey = e.shiftKey;
			ctrlKey = e.ctrlKey;
			keyCode = e.keyCode;
		}
		// 说话音量调节
		private function speakerVolumeChanged(e:SliderEvent):void {
			var st:SoundTransform = new SoundTransform(e.value);
			if (incomingStreamp2p) {
				incomingStreamp2p.soundTransform = st;
			}
			if (incomingStreamFMS) {
				incomingStreamFMS.soundTransform = st;
			}
			audioInd1.Current = 0.05 + e.value;
		}
		// 耳麦音量调节
		private function micVolumeChanged(e:SliderEvent):void {
			if (mic) {
				mic.gain = e.value;
			}
		}	
		//初始化音视频
		private function initAudio():void {
			mic= Microphone.getMicrophone();
			audioInd=new Indicator(70,7,0x000000,0xffffff);
			audioInd.Current = 0.05 + mic.activityLevel/100;
			uc.addChild(audioInd);
			uc.x=35;
			uc.y=13;
			micVolumeSlider.addChildAt(uc,0);
			audioInd1=new Indicator(70,7,0x000000,0xffffff);
			audioInd1.Current = 0.05 + speakerVolumeSlider.value;
			var uc1:UIComponent=new UIComponent();
			uc1.addChild(audioInd1);
			uc1.x=35;
			uc1.y=13;
			speakerVolumeSlider.addChildAt(uc1,0);
			mic.addEventListener(ActivityEvent.ACTIVITY, activity);
		}
		private function activity(event:ActivityEvent):void {
			addEventListener(Event.ENTER_FRAME, init1);
		}
		private function init1(event:Event):void {
			audioInd.Current = 0.05 + mic.activityLevel/100;
		}
		// 课时费计费成功
		private function periodFeeResult():void {
			var result:String=periodFeeRecord.lastResult.result;
			var tempArray:Array=result.split(",");
			var temp:Array;
			if(tempArray.length == 1) {// 非插入
				temp = tempArray[0].toString().split(";");
			} else if (tempArray.length == 2) {// 插入操作
				periodDate = tempArray[0].toString();
				temp = tempArray[1].toString().split(";");
			}
			// 更新用户积分
			updateUsersCredits(temp);
 		}
 		// 平台费计费成功
 		private function platformFeeResult():void {
 			var result:String=platformFeeRecord.lastResult.result;
			var tempArray:Array=result.split(",");
			var temp:Array;
			if(tempArray.length == 1) {// 非插入
				temp = tempArray[0].toString().split(";");
			} else if (tempArray.length == 2) {// 插入操作
				platformDate = tempArray[0].toString();
				temp = tempArray[1].toString().split(";");
			}
			// 更新用户积分
			updateUsersCredits(temp);
 		}
 		// 更新用户积分
 		private function updateUsersCredits(temp:Array):void {
 			feeArea.text=temp[0];
			credits=Number(temp[0]);
			changeCredits();
			//p2p流
			if (incomingStreamFMS == null) {
				var func_msg:Object = new Object;
				func_msg.name = "updateCredits";
				func_msg.userCredits=temp[1];
				_netGroup.sendToAllNeighbors(func_msg);
			} else {
				//fms流
				this.sharedObj.send("updateCredits", temp[1]);
			}
 		}
 		// 课时费计费错误 
	 	private function periodFeeFault():void {
			// 做一定尝试，若无法进行操作，关闭浏览器
	 	}
	 	// 平台费计费错误
	 	private function platformFeeFault():void {
	 	}
	 	// 老师计费并启动学生端计费
		private function periodFeeRequest():void {
			if (feeRequestBtn.label == lan[0].charging_stopped) {
				// 停止课时费收取
	 			stopPeriodFee();
	 			// P2P处理
	 			if (incomingStreamFMS == null) {
	 				var func_msg:Object = new Object;
					func_msg.name = "stopFeeForStudent";
					_netGroup.sendToAllNeighbors(func_msg);
	 			} else {//FMS处理
	 				this.sharedObj.send("stopFeeForStudent");
	 			}
			 	feeRequestBtn.label=lan[0].charging_started;
				feeRequestBtn.setStyle("color","#385A62");
			 	return;
	 		}
	 		if (isTrueFee(confirmFee.text)) {
	 			Alert.show(lan[0].course_fee_modified+"：\n"+Number(confirmFee.text)+"/min", lan[0].prompt, Alert.OK|Alert.CANCEL, null, teacherConfirmFee);
	 		} else {
	 			Alert.show(lan[0].course_fee_abnormal, lan[0].prompt);
	 		}
		}
		/**
		 * 是否是正常的课时费.
		 */
		private function isTrueFee(numStr:String):Boolean {
			if (Number(numStr) < 1) {
				return false;
			}
			return true;
		}
		/**
		 * 老师确认课时费.
		 */
		private function teacherConfirmFee(event:CloseEvent):void {
			if (event.detail == Alert.OK) {
				roomFee = new Number(confirmFee.text);
				// 老师向学生发送确认请求
				//p2p流
				if (incomingStreamFMS == null) {
					var func_msg:Object = new Object;
					func_msg.name = "feeConfirm";
					func_msg.userName=myName;
					func_msg.roomFee=roomFee;
					_netGroup.sendToAllNeighbors(func_msg);
				} else {
					//fms流
					this.sharedObj.send("feeConfirm", myName, roomFee);
				}
				feeRequestBtn.enabled = false;
			}
		}
		// 学生课时费确认-FMS
		public function feeConfirm(userName:String, fee:Number):void {
			if (!isTeacher) {
				roomFee=fee;
				if (credits<fee) {
					Alert.show(lan[0].prompt, lan[0].balance_insufficient, 1, null, charge);
					// 停止课时费收取
					stopPeriodFee();
					this.sharedObj.send("notEnoughCredits");
				} else {
					teacher[0].teaName=userName;
					Alert.show(userName+lan[0].charging_started+"\n"+lan[0].teacher1+": "+fee, lan[0].prompt, Alert.OK | Alert.CANCEL, null, feeConfirmHandler);
				}
			}
		}
		/**
		 * 停止课时费收取.
		 */
		public function stopPeriodFee():void {
			// 停止课时费收取
			beginPeriodFee = false;
			// 清除课时费计费插入时间
			periodDate = "";
		}
		/**
		 * 停止平台费收取.
		 */
		public function stopPlatformFee():void {
			// 清除平台费计费插入时间
			platformDate = "";
		}
		public function invalidRequest():void {
			
		}
	]]>
</mx:Script>
<!-- 课时费处理 -->
<mx:HTTPService id="periodFeeRecord" showBusyCursor="false" useProxy="false" method="POST" result="periodFeeResult()" fault="periodFeeFault()" url="/CG/chat.do?p=periodFeeRecord">
	<mx:request>
		<stuId>{userId}</stuId>
		<tchId>{myId}</tchId>
		<fee>{roomFee}</fee>
		<insertDate>{periodDate}</insertDate>
	</mx:request>
</mx:HTTPService>
<!-- 平台费处理 -->
<mx:HTTPService id="platformFeeRecord" showBusyCursor="false" useProxy="false" method="POST" result="platformFeeResult()" fault="platformFeeFault()" url="/CG/chat.do?p=platformFeeRecord">
	<mx:request>
		<stuId>{userId}</stuId>
		<tchId>{myId}</tchId>
		<insertDate>{platformDate}</insertDate>
	</mx:request>
</mx:HTTPService>
	<mx:Panel borderStyle="none" layout="vertical" width="430" height="700" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="totalArea" backgroundColor="#f2f2f2" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="0" backgroundAlpha="0.92" alpha="1.0" fontSize="12" fontFamily="Arial">
		<mx:HBox id="videoArea">
			<mx:VideoDisplay id="remoteVideoDisplay" width="267" height="200"/>
			<mx:VBox>
				<mx:VideoDisplay id="localVideoDisplay" width="133" height="100"/>
				<mx:Image source="@Embed('/assert/video.jpg')" useHandCursor="true" buttonMode="true" id="stopVideoButton" click="stopVideo(flag)" height="22"/> 
				<mx:HBox><mx:Image source="@Embed('/assert/micVol.jpg')" height="22"/> 
				<mx:HSlider id="micVolumeSlider" thumbSkin="@Embed('/assert/icon.png')" trackSkin="STSliderTrackSkin" value="90" width="72" showDataTip="false" minimum="0" maximum="100" change="micVolumeChanged(event)" /></mx:HBox>
				<mx:HBox><mx:Image source="@Embed('/assert/speakVol.jpg')" height="22"/> 
				<mx:HSlider id="speakerVolumeSlider" thumbSkin="@Embed('/assert/icon.png')" trackSkin="STSliderTrackSkin" showDataTip="false" value="0.9" width="72" minimum="0" maximum="1" change="speakerVolumeChanged(event)" /></mx:HBox>
			</mx:VBox>
		</mx:HBox>
		<mx:VBox paddingTop="10">
			<mx:TextArea id="info" width="405" height="90" editable="false"/>
			<mx:HBox>
				<mx:VBox>
					<mx:HBox paddingLeft="-10" paddingBottom="-22"><mx:RichTextEditor borderStyle="none" id="message" creationComplete="showControlBar();" width="348" height="120" backgroundColor="#f2f2f2" textAlign="left" fontStyle="normal" fontFamily="Verdana" horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="0" paddingRight="0" headerHeight="0" fontSize="12"/></mx:HBox>
				</mx:VBox>
				<mx:VBox paddingTop="3" >	
					<mx:Button id="feeRequestBtn" enabled="false" toolTip="{lan[0].charging_start_hint}" label="{lan[0].charging_started}" click="periodFeeRequest();" fontFamily="Arial" width="58" alpha="0.8" fontSize="12" cornerRadius="5" fontWeight="bold" paddingLeft="0" paddingRight="0"/>
					<mx:Button id="sendMessageBtn" label="{lan[0].send}" width="58" click="send()"/>
					<mx:Button id="closeBtn" click="closeMessage();" label="{lan[0].close}" width="58"/>
				</mx:VBox>
			</mx:HBox>
			<!--老师计费区-->
			<mx:HBox>
				<mx:Label text="{lan[0].current_balance}:"/><mx:Label id="feeArea" letterSpacing="-10"/><mx:Label text="=" letterSpacing="-10"/>
				<mx:Label id="rate1"/><mx:ComboBox id="rate2" dataProvider="{cards}" rowCount="3" close="closeHandler(event);"/>
				<mx:Label text="课时费:"/><mx:TextInput id="confirmFee" text="{roomFee}" width="50"/>
			</mx:HBox>
			<mx:ViewStack selectedIndex="{loginState}">
				<mx:HBox>
					<mx:DataGrid dataProvider="{student}" id="stu" width="405" height="52"><mx:columns>
						<mx:DataGridColumn dataField="stuName" headerText="{lan[0].student}" width="40" textAlign="center"/>
						<mx:DataGridColumn dataField="stuTime" headerText="{lan[0].duration}" width="30" textAlign="center"/>
						<mx:DataGridColumn dataField="stuFee" headerText="{lan[0].total}" width="40" textAlign="center"/>
						<mx:DataGridColumn dataField="forChi" headerText="{lan[0].fee}" width="30" textAlign="center"/>
						<mx:DataGridColumn dataField="totalEarn" headerText="{lan[0].net}" width="50" textAlign="center"/>
					</mx:columns></mx:DataGrid>
				</mx:HBox>
				<mx:HBox>
					<mx:DataGrid dataProvider="{teacher}" id="tch" width="405" height="52"><mx:columns>
						<mx:DataGridColumn dataField="teaName" headerText="{lan[0].teacher}" width="40" textAlign="center"/>
						<mx:DataGridColumn dataField="stuTime" headerText="{lan[0].duration}" width="30" textAlign="center"/>
						<mx:DataGridColumn dataField="stuFee" headerText="{lan[0].teacher1}" width="40" textAlign="center"/>
						<mx:DataGridColumn dataField="forChi" headerText="{lan[0].fee}" width="30" textAlign="center"/>
						<mx:DataGridColumn dataField="totalCost" headerText="{lan[0].total1}" width="50" textAlign="center"/>
					</mx:columns></mx:DataGrid>
				</mx:HBox>
			</mx:ViewStack>
		</mx:VBox>
	</mx:Panel>
</mx:Application>
