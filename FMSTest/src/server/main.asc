load("netservices.asc");
// 用户连接列表
var clientList;
// 用户请求列表
var requestList;
// 用户状态
var userStatus;
application.onAppStart = function() {
	trace(getDate()+"启动服务器");
	var onlineUsers=SharedObject.get("onlineUser", true);
	onlineUsers.clear();
	onlineUsers.flush();
	clientList = new Object();
	requestList = new Object();
	userStatus = new Object();
};
application.onConnect = function(client, userId, userName, roomId, calleeId, reqType) {
	if (userId == null || userName == null) {
		return false;
	}

	// 关联用户编号
	client["userId"] = userId;
	// 关联用户名称
	client["userName"] = userName;
	application.acceptConnection(client);

	client.pingTheServer = function() {
	}

	// 获取与当前用户关联的所有FMS连接
	var conList = clientList[userId];
	if (conList == null) {
		conList = new Array();
	}
	if (roomId == null) {// 非教室|聊天
		conList.push(client);
		// 记录当前连接
		clientList[userId] = conList;
		// 获取所有在线用户
		var onlineUsers=SharedObject.get("onlineUser", true);
		// 获取对应连接属性
		var loginInfo=onlineUsers.getProperty(userId);
		if (loginInfo != null) {// 有连接记录
			// 获取原有连接个数
			var loginCount=loginInfo.count;
			if (loginCount < 0) {// 用户正在刷新|退出
				clearInterval(loginCount*-1);
				loginInfo.count = 1;
			} else {
				// 连接数+1
				loginInfo.count = loginCount+1;
			}
		} else {// 没有连接记录
			// 记录连接次数为1
			var loginInfo = new Object();
			loginInfo.count = 1;
		}
		onlineUsers.lock();
		// 重置登陆信息
		onlineUsers.setProperty(userId, loginInfo);
		// 将共享数据写入硬盘
		onlineUsers.flush();
		onlineUsers.unlock();

		// 请求者向被请求客户端发起请求.
		client.sendRequest = function(requestType, roomId, calleeId) {
			// 获取请求人编号
			var callerId = client.userId;
			// 获取请求人昵称
			var callerName = client.userName;
			client.callerId = callerId;
			if (userStatus[client.userId] != null) {// 自己正在上课|聊天
				client.call("selfBusy", null, userStatus[client.userId]);
				return;
			}
			if (userStatus[calleeId] != null) {// 被请求用户正在上课|聊天
				client.call("userIsBusy", null, userStatus[calleeId]);
				return;
			}

			if (userIsOnline(client, calleeId)) {// 被请求用户是在线的
				// 获取请求用户的请求列表
				var callerRequest = getUserRequestList(callerId);
				// 获取被请求用户的请求列表
				var calleeRequest = getUserRequestList(calleeId);
				// 获取与被请求人相关的请求
				var reqInfo = callerRequest[calleeId];
				if (reqInfo == null)
					reqInfo = new Object();
				if (reqInfo[requestType] == null) {// 首次请求
					if (roomId != null) {
						// 设置为未处理的请求
						reqInfo[requestType]=0;
						reqInfo["roomId"]=roomId;
						reqInfo.fromUser=client.userId;
					}

					// 获取被请求人连接至FMS的最后一个连接.
					var calleeClient = getUserClient(calleeId, -1);
					if (calleeClient == null) {// 无法获取相关用户的链接
						client.call("userIsRefresh", null);
					} else {
						// 保存用户未处理的请求信息.
						saveReqInfo(callerId, calleeId, reqInfo);
						if (roomId != null) {
							// 调用被请求者客户端方法-通知被请求者.
							calleeClient.call("calleeConfirm", null, callerId, callerName, requestType, roomId, calleeId);
						} else {
							calleeClient.call("calleeConfirm", null, callerId, callerName, requestType, null, null);
						}
						// 告知请求者,用户正在处理聊天请求.
						// client.call("sendRequestResult", null, calleeClient.userName, 0);

						// 正在处理.
						reqInfo[requestType] = 1;
						// 保存用户正在处理的请求信息.
						saveReqInfo(callerId, calleeId, reqInfo);
					}
				} else {// 已有过请求.
					switch(reqInfo[requestType]) {
						case 0:// 未处理的请求.
						case 1:// 正在处理的请求.
						case 3:// 接受的请求-聊天中.
							// 获取被请求人连接至FMS的最后一个连接.
							var calleeClient = getUserClient(calleeId, -1);
							if (calleeClient != null) {
								// 告知请求人，重复请求.
								client.call("invalidRequest", null, calleeClient.userName, reqInfo[requestType]);
							} else {// 无法获取被请求人链接.
								client.call("userIsRefresh", null);
							}
						break;
						case 5:// 取消请求
							// 取消请求
						break;
						case 2:// 被忽略的请求
						break;
						case 4:// 拒绝的请求
						break;
					}
				}
			} else {
				// 清空请求数据
				saveReqInfo(callerId, calleeId, null);
			}
		}
		// 被请求客户端反馈请求处理结果给请求者.
		client.sendRequestStatus = function(callerId, requestType, status, roomId, teacherId) {
			client["callerId"] = callerId;
			// 获取被请求人编号
			var calleeId = client.userId;
			// 获取被请求人昵称
			var calleeName = client.userName;

			// 获取请求人连接至FMS的最有一个连接.
			var callerClient = getUserClient(callerId, -1);
			if (callerClient != null) {
				callerClient.call("requestStatusResult", null, calleeId, calleeName, requestType, status, roomId, teacherId);

				// 获取请求人所有请求信息.
				var callerRequest = getUserRequestList(callerId);
				// 获取被请求(当前)人所有请求信息
				var calleeRequest = getUserRequestList(calleeId);
				var reqInfo = null;
				if (status == "Yes") {
					// 获取请求人与被请求人相关的请求信息.
					var reqInfo = callerRequest[calleeId];
					if (reqInfo == null) {// 无效的请求
						// client.call("", null);
					} else {
						// 设置为接受
						reqInfo[requestType] = 3;
						// 检测被请求人是否有其它用户请求.
						for (var otherId in calleeRequest) {
							if (otherId != callerId) {// 非请求人编号.
								// 获取当前被请求用户与其他用户关联请求信息.
								var otherInfo = calleeRequest[otherId];
								if (otherInfo != null) {// 存在与其它用户关联信息.
									var callerClient = getUserClient(otherId, -1)
									if (callerClient != null) {
										callerClient.call("userIsBusy", null, requestType);
									}
									// 清除当前被请求人用户与其他用户关联的请求.
									delete calleeRequest[otherId];
									delete getUserRequestList(otherId)[calleeId];
								}
							}
						}
					}
				}
				saveReqInfo(callerId, calleeId, reqInfo);
			} else {// 无法获取被请求人连接
				client.call("userIsRefresh", null);
			}
		}
	} else {// 教室|聊天请求
		// 关联教室|聊天编号
		client["roomId"] = roomId;
		// 关联被呼叫人编号
		client["calleeId"] = calleeId;
		// 关联呼叫类型
		client["reqType"] = reqType;
		// 不可打扰
		userStatus[userId] = reqType;
		// 修正用户聊天状态
		client.resetUserStatus = function() {
			delete userStatus[client.userId];
		}
	}

	// 获取与当前用户相关的未处理请求
	// 获取当前用户所有请求
	var reqList = requestList[userId];
	for(var otherId in reqList) {
		// 获取与被叫人相关信息
		var reqInfo = reqList[otherId];

		if (reqInfo != null) {
			// 获取请求人编号
			var fromUser = reqInfo.fromUser;
			if (userIsOnline(client, otherId)) {
				// 获取被请求者在FMS上第一个连接
				var calleeClient = getUserClient(otherId, 0);
				if (calleeClient == null) {// 无法取得被请求者的链接
					client.call("userIsRefresh", null);
					return;
				}
				if (reqInfo["chat"] == 0 || reqInfo["chat"] == 1) {
					if (fromUser == userId) {// 当前用户是请求发起人
						// 告知请求者,用户正在处理请求.
						client.call("sendRequestResult", null, calleeClient["userName"], 1);
					} else {// 当前用户是被请求人
						// 调用被请求者客户端方法-通知被请求者
						client.call("calleeConfirm", null, otherId, calleeClient["userName"], "chat", reqInfo["roomId"], userId);
					}
				}
				if (reqInfo["classRoom"] == 0 || reqInfo["classRoom"] == 1) {
					if (fromUser == userId) {// 当前用户是请求发起人
						// 告知请求者,用户正在处理请求.
						client.call("sendRequestResult", null, calleeClient["userName"], 1);
					} else {// 当前用户是被请求人
						// 调用被请求者客户端方法-通知被请求者
						client.call("calleeConfirm", null, otherId, calleeClient["userName"], "classRoom", reqInfo["roomId"], userId);
					}
				}
			} else {
				saveReqInfo(userId, calleeId, null);
			}
		}
	}
}
application.onDisconnect = function(client) {
	var calleeId = client.calleeId;
	if (calleeId != null) {// 这里只在教室|聊天退出时执行
		// 获取当前用户的请求列表-请求者
		var callerRequest = requestList[client.userId];
		if (callerRequest != null) {
			// 获取与被请求者关联信息
			var reqInfo = callerRequest[calleeId];
			if (reqInfo != null) {
				// 获取请求类型
				var requestType = client.reqType;
				reqInfo[requestType] = null;
				if (requestType == "chat") {
					if (reqInfo["classRoom"] == null) {
						reqInfo = null;
					}
				} else {// 教室
					userClient = getUserClient(client.userId, -1);
					if (userClient != null)
						userClient.call("commentClass", null, client.roomId);
					if (reqInfo["chat"] == null) {
						reqInfo = null;
					}
				}
				callerRequest[calleeId] = reqInfo;
				requestList[client.userId] = callerRequest;
			}
		}

		// 清空免打扰设置
		delete userStatus[client.userId];
	} else {// 退出
		// 获取当前用户相关的连接
		var userClientList = clientList[client.userId];
		if (userClientList != null) {
			for(var i=0; i<userClientList.length; i++) {
				if (userClientList[i] === client) {
					// 删除client记录
					userClientList.splice(i, 1);
				}
			}
		}
		// 获取所有在线用户
		var onlineUsers=SharedObject.get("onlineUser", true);
		try{
			// 获取对应连接属性
			var loginInfo=onlineUsers.getProperty(client.userId);
			if (loginInfo.count > 1) {// 还有其它登陆信息
				loginInfo.count = loginInfo.count - 1;
				onlineUsers.lock();
				onlineUsers.setProperty(client.userId, loginInfo);
				onlineUsers.flush();
				onlineUsers.unlock();
			} else if (loginInfo.count == 1 || loginInfo.count == null) {// 全部退出
				var intervalId = setInterval(function() {
					// 获取当前用户所有请求
					var reqList = requestList[client.userId];
					for(var otherId in reqList) {
						// 清空相关的所有请求
						saveReqInfo(client.userId, otherId, null);
						var otherClient = getUserClient(otherId, -1);
						if (otherClient != null) {
							otherClient.call("userIsLogout", null, client.userName);
						}
					}
					trace(getDate()+"用户："+client.userId+"执行Flash退出");
					// 本地
					NetServices.setDefaultGatewayUrl('http://tim:8080/CG/home.do?p=logoutFromFlash&userID='+client.userId);
					// 服务器
					//NetServices.setDefaultGatewayUrl('http://www.chinesegreat.com/CG/home.do?p=logoutFromFlash&userID='+client.userId);
					var conn = NetServices.createGatewayConnection();
					conn.call("");
					// 清除对方ShareObject记录
					onlineUsers.lock();
					onlineUsers.setProperty(client.userId, null);
					onlineUsers.flush();
					onlineUsers.unlock();
					clearInterval(intervalId);
				}, 10000);
				onlineUsers.lock();
				var obj = new Object();
				obj.count = intervalId*-1;
				onlineUsers.setProperty(client.userId, obj);
				onlineUsers.flush();
				onlineUsers.unlock();
			} else {
				onlineUsers.clear();
				onlineUsers.flush();
			}
		} catch(e) {
			onlineUsers.clear();
			onlineUsers.flush();
		}
	}
}
function userIsOnline(client, userId) {
	// 获取所有在线用户
	var onlineUsers=SharedObject.get("onlineUser", true);
	// 获取被请求对象的连接
	var loginInfo = onlineUsers.getProperty(userId);
	// 不存在的用户
	if (loginInfo == null) {// 用户已确认不在线
		client.call("userIsOffline", null);
		return false;
	} else if (loginInfo.count < 0) {// 用户正在执行退出|刷新
		client.call("userIsRefresh", null);
		return false;
	} else {
		return true;
	}
}
// 获取用户连接至FMS的连接.若index=0获取第一个，若index!=0则获取最后一个链接
function getUserClient(userId, index) {
	var userClientList = clientList[userId];
	if (userClientList == null) {
		return null;
	} else {
		if (index == 0) {
			return userClientList[0];
		} else {
			return userClientList[userClientList.length-1];
		}
	}
}
// 获取用户相关的所有请求列表.
function getUserRequestList(userId) {
	var userRequestList = requestList[userId];
	if (userRequestList == null) {
		userRequestList = new Object();
	}
	return userRequestList;
}
// 将请求数据关联至各用户.
function saveReqInfo(callerId, calleeId, reqInfo) {
	// 获取请求用户的请求列表
	var callerRequest = getUserRequestList(callerId);
	// 获取被请求用户的请求列表
	var calleeRequest = getUserRequestList(calleeId);
	// 将请求数据关联至请求者
	callerRequest[calleeId] = reqInfo;
	requestList[callerId] = callerRequest;
	// 将请求数据关联至被请求者
	calleeRequest[callerId] = reqInfo;
	requestList[calleeId] = calleeRequest;
}
// 获取当前时间小时:分钟:秒数
function getDate() {
	var date = new Date();
	return date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
}