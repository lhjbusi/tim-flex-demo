load("netservices.asc");
// 用户连接列表
var clientList;
// 用户请求列表
var requestList;
application.onAppStart = function() {
	clientList = new Object();
	requestList = new Object();
};
application.onConnect = function(client, userId, userName, roomId, calleeId) {
	if (userId == null || userName == null) {
		return false;
	}

	// 关联用户编号
	client["userId"] = userId;
	// 关联用户名称
	client["userName"] = userName;
	application.acceptConnection(client);

	// 获取与当前用户关联的所有FMS连接
	var conList = clientList[userId];
	if (conList == null) {
		conList = new Array();
	}
	if (roomId == null) {// 非教室类请求
		conList.push(client);
		// 记录当前连接
		clientList[userId] = conList;
	} else {
		// 关联教室编号
		client["roomId"] = roomId;
		trace("教室编号："+roomId+"    被呼叫人编号："+calleeId);
		// 关联被呼叫人编号
		client["calleeId"] = calleeId;
	}

	// 获取所有在线用户
	var onlineUsers=SharedObject.get("onlineUser", true);
	// 获取对应连接属性
	var loginInfo=onlineUsers.getProperty(userId);
	if (loginInfo != null) {// 有连接记录
		trace(userId+"重复初始化进来");
		clearInterval(loginInfo);
		// 获取原有连接个数
		var loginCount=loginInfo.count;
		if (loginCount > -1) {
			// 连接数+1
			loginInfo.count = loginCount+1;
		}
		// 用户连接关联
		client.count = loginInfo.count;
	} else {// 没有连接记录
		trace("首次登录")
		// 发布时,这里就是标记用户是否在线的了，取消下行注释
		// client.call("userIsOffline", null);
		// 记录连接次数为1
		client.count = 1;
		var loginInfo = new Object();
		loginInfo.count = 1;
	}
	// 重置登陆信息
	onlineUsers.setProperty(userId, loginInfo);
	// 将共享数据写入硬盘
	onlineUsers.flush();

	// 请求者向被请求客户端发起请求.
	client.sendRequest = function(requestType, roomId, calleeId) {
		// 获取请求人编号
		var callerId = client["userId"];
		// 获取请求人昵称
		var callerName = client["userName"];
		trace(callerId+"向"+calleeId+"发起"+requestType+"请求   房间编号："+roomId);

		// 获取所有在线用户
		var onlineUsers=SharedObject.get("onlineUser", true);
		// 获取被请求对象的连接
		var loginInfo = onlineUsers.getProperty(calleeId);
		// 不存在的用户
		if (loginInfo == null) {
			client.call("userIsOffline", null);
			return;
		}

		// 获取当前用户的请求列表-请求者
		var callerRequest = requestList[callerId];
		if (callerRequest == null) {
			callerRequest = new Object();
			trace("用户："+callerId+"请求列表被实例化.");
		}
		// 获取与被请求人相关的请求
		var reqInfo = callerRequest[calleeId];
		trace(callerId+"向"+calleeId+"发起"+requestType+"请求.是否首次请求："+(reqInfo==null));
		if (reqInfo == null) {// 首次请求
			reqInfo = new Object();
			// 未处理的请求
			reqInfo.status = 0;
			if (roomId != null) {
				// 设置请求房间编号
				reqInfo["roomId"]=roomId;
			}

			// 将请求数据关联至请求者
			callerRequest[calleeId] = reqInfo;
			requestList[callerId] = callerRequest;
			// 将请求数据关联至被请求者
			var calleeRequest = new Object();
			calleeRequest[callerId] = reqInfo;
			requestList[calleeId] = calleeRequest;

			// 获取被请求人连接至FMS的所有连接
			var calleeClientList = clientList[calleeId];
			if (calleeClientList != null) {
				trace("被请求人连接至FMS个数为："+calleeClientList.length);
			}
			// 获取被请求人连接至FMS的最后一个连接
			var calleeClient = calleeClientList[calleeClientList.length-1];
			trace("被请求人连接为空？"+(calleeClient == null));
			if (roomId != null) {
				// 调用被请求者客户端方法-通知被请求者
				calleeClient.call("calleeConfirm", null, callerId, callerName, requestType, roomId, calleeId);
			} else {
				calleeClient.call("calleeConfirm", null, callerId, callerName, requestType, null, null);
			}
			// 告知请求者,用户正在处理聊天请求
			client.call("sendRequestResult", null, calleeId, requestType);

			// 正在处理
			reqInfo.status =1;
			// 将请求数据关联至请求者
			callerRequest = new Object();
			callerRequest[calleeId] = reqInfo;
			requestList[callerId] = callerRequest;
			// 将请求数据关联至被请求者
			calleeRequest = new Object();
			calleeRequest[callerId] = reqInfo;
			requestList[calleeId] = calleeRequest;
		} else {// 已有过请求
			trace("请求状态："+reqInfo.status);
			switch(reqInfo.status) {
				case 0:// 未处理的请求
				case 1:// 正在处理的请求
				case 3:// 接受的请求-聊天中
					// 获取被请求人连接至FMS的所有连接
					var calleeClientList = clientList[calleeId];
					if (calleeClientList != null) {
						trace("被请求人连接至FMS个数为："+calleeClientList.length);
					}
					// 获取被请求人连接至FMS的最后一个连接
					var calleeClient = calleeClientList[calleeClientList.length-1];
					// 告知请求人，重复请求
					client.call("invalidRequest", null, calleeClient["userName"], reqInfo.status);
				break;
				case 5:// 取消请求
					// 取消请求
				break;
				case 2:// 被忽略的请求
				break;
				case 4:// 拒绝的请求
				break;
			}
		}
	}
	// 被请求客户端反馈请求处理结果给请求者.
	client.sendRequestStatus = function(callerId, requestType, status, roomId, teacherId) {
		// 获取被请求人编号
		var calleeId = client["userId"];
		// 获取被请求人昵称
		var calleeName = client["userName"];

		// 获取请求人连接至FMS的所有连接.
		var callerClientList = clientList[callerId];
		// 获取被请求人连接至FMS的最有一个连接.
		var callerClient = callerClientList[callerClientList.length-1];
		callerClient.call("requestStatusResult", null, calleeId, calleeName, requestType, status, roomId, teacherId);

		// 获取请求人所有请求信息
		var callerRequest = requestList[callerId];
		// 获取被请求人素有请求信息
		var calleeRequest = requestList[calleeId];
		if (status == "Yes") {
			// 获取与被请求人相关的请求
			var reqInfo = callerRequest[calleeId];
			// 设置为接受
			reqInfo.status = 3;
			callerRequest[calleeId] = reqInfo;
			calleeRequest[callerId] = reqInfo;
		} else {
			// 置空请求数据
			callerRequest[calleeId] = null;
			calleeRequest[callerId] = null;
			trace("对方拒绝请求，请求数据被置空："+callerId);
		}
		requestList[callerId] = callerRequest;
		requestList[calleeId] = calleeRequest;
	}
}
application.onDisconnect = function(client) {
	trace("用户：" + client.userId+"，断开FMS连接\n");
	if (client.roomId != null) {
		var calleeId = client.calleeId;
		// 获取当前用户的请求列表-请求者
		var userRequest = requestList[client.userId];
		if (userRequest != null) {
			userRequest[calleeId] = null;
			requestList[calleeId] = userRequest;
			trace("1清空"+calleeId+"与"+client.userId+"请求记录");
		}

		var calleeId = client["calleeId"];
		userRequest = requestList[calleeId];
		if (userRequest != null) {
			userRequest[client.userId] = null;
			requestList[client["userId"]] = userRequest;
			trace("2清空"+client["userId"]+"与"+calleeId+"请求记录");
		}
	}
	// 获取被请求人相关的连接
	var userClientList = clientList[client.userId];
	for(var i=0; i<userClientList.length; i++) {
		if (userClientList[i] === client) {
			// 删除client记录
			userClientList.splice(i, 1);
		}
	}
	// 获取所有在线用户
	var onlineUsers=SharedObject.get("onlineUser", true);
	try{
		// 获取对应连接属性
		var loginInfo=onlineUsers.getProperty(client.userId);
		if (loginInfo.count > 1) {// 还有其它登陆信息
			loginInfo.count = loginInfo.count - 1;
			onlineUsers.setProperty(client.userId, loginInfo);
		} else if (loginInfo.count == 1) {// 全部退出
			var intervalId = setInterval(function() {
				trace(client.userId+"离开");
				NetServices.setDefaultGatewayUrl('http://192.168.1.138/CG/home.do?p=logoutFromFlash&userID='+client["userId"]);
				var conn = NetServices.createGatewayConnection();
				conn.call("");
				clearInterval(intervalId);
			}, 10000);
			onlineUsers.setProperty(client.userId, intervalId);
			onlineUsers.lock();
			onlineUsers.setProperty("onlineUser", onlineUsers);
			onlineUsers.unlock();
			onlineUsers.flush();
		} else {
			onlineUsers.clear();
			onlineUsers.flush();
		}
	} catch(e) {
		onlineUsers.clear();
		onlineUsers.flush();
	}
}
